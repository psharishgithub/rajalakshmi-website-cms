/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    announcements: Announcement;
    'home-slider': HomeSlider;
    'blog-posts': BlogPost;
    testimonials: Testimonial;
    coe: Coe;
    'coe-categories': CoeCategory;
    departments: Department;
    'department-sections': DepartmentSection;
    'secondary-nav': SecondaryNav;
    'dynamic-pages': DynamicPage;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    announcements: AnnouncementsSelect<false> | AnnouncementsSelect<true>;
    'home-slider': HomeSliderSelect<false> | HomeSliderSelect<true>;
    'blog-posts': BlogPostsSelect<false> | BlogPostsSelect<true>;
    testimonials: TestimonialsSelect<false> | TestimonialsSelect<true>;
    coe: CoeSelect<false> | CoeSelect<true>;
    'coe-categories': CoeCategoriesSelect<false> | CoeCategoriesSelect<true>;
    departments: DepartmentsSelect<false> | DepartmentsSelect<true>;
    'department-sections': DepartmentSectionsSelect<false> | DepartmentSectionsSelect<true>;
    'secondary-nav': SecondaryNavSelect<false> | SecondaryNavSelect<true>;
    'dynamic-pages': DynamicPagesSelect<false> | DynamicPagesSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {
    about: About;
    admissions: Admission;
    research: Research;
    placement: Placement;
    'international-relations': InternationalRelation;
    academics: Academic;
    'student-life': StudentLife;
    regulations: Regulation;
    facilities: Facility;
  };
  globalsSelect: {
    about: AboutSelect<false> | AboutSelect<true>;
    admissions: AdmissionsSelect<false> | AdmissionsSelect<true>;
    research: ResearchSelect<false> | ResearchSelect<true>;
    placement: PlacementSelect<false> | PlacementSelect<true>;
    'international-relations': InternationalRelationsSelect<false> | InternationalRelationsSelect<true>;
    academics: AcademicsSelect<false> | AcademicsSelect<true>;
    'student-life': StudentLifeSelect<false> | StudentLifeSelect<true>;
    regulations: RegulationsSelect<false> | RegulationsSelect<true>;
    facilities: FacilitiesSelect<false> | FacilitiesSelect<true>;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  role: 'SuperAdmin' | 'Admin' | 'Blogger';
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt: string;
  /**
   * User who uploaded this media
   */
  uploadedBy: string | User;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "announcements".
 */
export interface Announcement {
  id: string;
  title: string;
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  /**
   * Optional link for "Read More" or call-to-action
   */
  link?: string | null;
  /**
   * Text to display for the link (e.g., "Read More", "Learn More")
   */
  linkText?: string | null;
  isActive?: boolean | null;
  /**
   * Higher numbers appear first
   */
  priority?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "home-slider".
 */
export interface HomeSlider {
  id: string;
  title: string;
  /**
   * Desktop version - Recommended aspect ratio: 16:9
   */
  desktopImage: string | Media;
  /**
   * Mobile version - Recommended aspect ratio: 3:4
   */
  mobileImage?: (string | null) | Media;
  link?: string | null;
  isActive?: boolean | null;
  order?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blog-posts".
 */
export interface BlogPost {
  id: string;
  title: string;
  slug: string;
  excerpt: string;
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  featuredImage?: (string | null) | Media;
  /**
   * Author is automatically set to the current user
   */
  author: string | User;
  isPublished?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "testimonials".
 */
export interface Testimonial {
  id: string;
  quote: string;
  authorName: string;
  /**
   * e.g., "Student", "Faculty", "Alumni"
   */
  authorTitle?: string | null;
  authorImage?: (string | null) | Media;
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "coe".
 */
export interface Coe {
  id: string;
  /**
   * Title of the COE document
   */
  title: string;
  /**
   * Brief description of the document
   */
  description?: string | null;
  /**
   * Select the category for this document
   */
  category: string | CoeCategory;
  /**
   * Upload the PDF file for this COE document
   */
  pdfFile: string | Media;
  /**
   * Whether this document is active and visible
   */
  isActive?: boolean | null;
  /**
   * Higher numbers appear first within the category
   */
  priority?: number | null;
  /**
   * Number of times this document has been downloaded
   */
  downloadCount?: number | null;
  /**
   * Optional tags for better organization and searchability
   */
  tags?:
    | {
        tag: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "coe-categories".
 */
export interface CoeCategory {
  id: string;
  /**
   * Name of the COE category (e.g., "AI/ML", "IoT", "Cybersecurity")
   */
  name: string;
  /**
   * Brief description of what this category represents
   */
  description?: string | null;
  /**
   * Icon class or emoji for the category (optional)
   */
  icon?: string | null;
  /**
   * Whether this category is active and visible
   */
  isActive?: boolean | null;
  /**
   * Order of display (higher numbers appear first)
   */
  order?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Manage departments for navigation dropdown
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "departments".
 */
export interface Department {
  id: string;
  /**
   * Department name (e.g., Computer Science Engineering)
   */
  name: string;
  /**
   * Department code (e.g., CSE, ECE, MECH)
   */
  code: string;
  /**
   * URL slug (e.g., computer-science-engineering)
   */
  slug: string;
  /**
   * Short name for display in dropdown (optional)
   */
  shortName?: string | null;
  /**
   * Brief description of the department
   */
  description?: string | null;
  /**
   * Show in navigation dropdown
   */
  isActive?: boolean | null;
  /**
   * Display order in dropdown (higher numbers first)
   */
  order?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "department-sections".
 */
export interface DepartmentSection {
  id: string;
  /**
   * Select the department this content belongs to
   */
  department: string | Department;
  /**
   * Internal title for this content section
   */
  title: string;
  /**
   * Whether this section is active and visible
   */
  isActive?: boolean | null;
  /**
   * Create custom sections with rich text, tables, or dynamic tables
   */
  dynamicSections?:
    | {
        /**
         * Title of the section
         */
        title: string;
        /**
         * Choose the type of content for this section
         */
        contentType?:
          | (
              | 'richText'
              | 'table'
              | 'dynamicTable'
              | 'multipleTables'
              | 'mixed'
              | 'mixedDynamic'
              | 'mixedMultipleTables'
            )
          | null;
        /**
         * Rich text content for this section
         */
        content?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        /**
         * Table data with labels and links
         */
        tableData?:
          | {
              /**
               * Display text for the table row
               */
              label: string;
              /**
               * URL or file path for the link
               */
              link: string;
              /**
               * Check if this is an external link (opens in new tab)
               */
              isExternal?: boolean | null;
              id?: string | null;
            }[]
          | null;
        /**
         * Configure a custom table with multiple columns
         */
        dynamicTableConfig?: {
          /**
           * Paste CSV data here to automatically populate the table. Data will be processed when you save.
           */
          csvInput?: string | null;
          columns: {
            /**
             * Unique identifier for this column (no spaces, use camelCase)
             */
            key: string;
            /**
             * Display label for the column header
             */
            label: string;
            /**
             * Optional CSS width (e.g., "w-20", "w-1/4")
             */
            width?: string | null;
            id?: string | null;
          }[];
          /**
           * Add rows to your table. Each row should have data for all columns.
           */
          rows: {
            /**
             * Add data for each column in this row. Make sure to add cells in the same order as your columns.
             */
            rowData: {
              /**
               * Column key (should match one of your column keys above)
               */
              columnKey: string;
              /**
               * Cell content/value
               */
              value: string;
              /**
               * Make this cell a clickable link
               */
              isLink?: boolean | null;
              /**
               * URL for the link
               */
              linkUrl?: string | null;
              /**
               * External link (opens in new tab)
               */
              isExternal?: boolean | null;
              id?: string | null;
            }[];
            id?: string | null;
          }[];
          /**
           * Visual style of the table
           */
          variant?: ('default' | 'bordered' | 'striped') | null;
        };
        /**
         * Configure multiple custom tables with CSV input support
         */
        multipleTablesConfig?:
          | {
              /**
               * Title for this table
               */
              tableTitle?: string | null;
              /**
               * Paste CSV data here to automatically populate the table. Data will be processed when you save.
               */
              csvInput?: string | null;
              columns: {
                /**
                 * Unique identifier for this column (no spaces, use camelCase)
                 */
                key: string;
                /**
                 * Display label for the column header
                 */
                label: string;
                /**
                 * Optional CSS width (e.g., "w-20", "w-1/4")
                 */
                width?: string | null;
                id?: string | null;
              }[];
              /**
               * Add rows to your table. Each row should have data for all columns.
               */
              rows: {
                /**
                 * Add data for each column in this row. Make sure to add cells in the same order as your columns.
                 */
                rowData: {
                  /**
                   * Column key (should match one of your column keys above)
                   */
                  columnKey: string;
                  /**
                   * Cell content/value
                   */
                  value: string;
                  /**
                   * Make this cell a clickable link
                   */
                  isLink?: boolean | null;
                  /**
                   * URL for the link
                   */
                  linkUrl?: string | null;
                  /**
                   * External link (opens in new tab)
                   */
                  isExternal?: boolean | null;
                  id?: string | null;
                }[];
                id?: string | null;
              }[];
              /**
               * Visual style of the table
               */
              variant?: ('default' | 'bordered' | 'striped') | null;
              id?: string | null;
            }[]
          | null;
        /**
         * Optional custom title for the table (defaults to "Table Title")
         */
        tableTitle?: string | null;
        /**
         * Optional image for this section
         */
        image?: (string | null) | Media;
        /**
         * Order of display (lower numbers appear first)
         */
        order?: number | null;
        /**
         * Whether this section is active and visible
         */
        isActive?: boolean | null;
        id?: string | null;
      }[]
    | null;
  introduction: {
    /**
     * Title of the section
     */
    title: string;
    /**
     * Choose the type of content for this section
     */
    contentType?:
      | ('richText' | 'table' | 'dynamicTable' | 'multipleTables' | 'mixed' | 'mixedDynamic' | 'mixedMultipleTables')
      | null;
    /**
     * Rich text content for this section
     */
    content?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Table data with labels and links
     */
    tableData?:
      | {
          /**
           * Display text for the table row
           */
          label: string;
          /**
           * URL or file path for the link
           */
          link: string;
          /**
           * Check if this is an external link (opens in new tab)
           */
          isExternal?: boolean | null;
          id?: string | null;
        }[]
      | null;
    /**
     * Configure a custom table with multiple columns
     */
    dynamicTableConfig?: {
      /**
       * Paste CSV data here to automatically populate the table. Data will be processed when you save.
       */
      csvInput?: string | null;
      columns: {
        /**
         * Unique identifier for this column (no spaces, use camelCase)
         */
        key: string;
        /**
         * Display label for the column header
         */
        label: string;
        /**
         * Optional CSS width (e.g., "w-20", "w-1/4")
         */
        width?: string | null;
        id?: string | null;
      }[];
      /**
       * Add rows to your table. Each row should have data for all columns.
       */
      rows: {
        /**
         * Add data for each column in this row. Make sure to add cells in the same order as your columns.
         */
        rowData: {
          /**
           * Column key (should match one of your column keys above)
           */
          columnKey: string;
          /**
           * Cell content/value
           */
          value: string;
          /**
           * Make this cell a clickable link
           */
          isLink?: boolean | null;
          /**
           * URL for the link
           */
          linkUrl?: string | null;
          /**
           * External link (opens in new tab)
           */
          isExternal?: boolean | null;
          id?: string | null;
        }[];
        id?: string | null;
      }[];
      /**
       * Visual style of the table
       */
      variant?: ('default' | 'bordered' | 'striped') | null;
    };
    /**
     * Configure multiple custom tables with CSV input support
     */
    multipleTablesConfig?:
      | {
          /**
           * Title for this table
           */
          tableTitle?: string | null;
          /**
           * Paste CSV data here to automatically populate the table. Data will be processed when you save.
           */
          csvInput?: string | null;
          columns: {
            /**
             * Unique identifier for this column (no spaces, use camelCase)
             */
            key: string;
            /**
             * Display label for the column header
             */
            label: string;
            /**
             * Optional CSS width (e.g., "w-20", "w-1/4")
             */
            width?: string | null;
            id?: string | null;
          }[];
          /**
           * Add rows to your table. Each row should have data for all columns.
           */
          rows: {
            /**
             * Add data for each column in this row. Make sure to add cells in the same order as your columns.
             */
            rowData: {
              /**
               * Column key (should match one of your column keys above)
               */
              columnKey: string;
              /**
               * Cell content/value
               */
              value: string;
              /**
               * Make this cell a clickable link
               */
              isLink?: boolean | null;
              /**
               * URL for the link
               */
              linkUrl?: string | null;
              /**
               * External link (opens in new tab)
               */
              isExternal?: boolean | null;
              id?: string | null;
            }[];
            id?: string | null;
          }[];
          /**
           * Visual style of the table
           */
          variant?: ('default' | 'bordered' | 'striped') | null;
          id?: string | null;
        }[]
      | null;
    /**
     * Optional custom title for the table (defaults to "Table Title")
     */
    tableTitle?: string | null;
    /**
     * Optional image for this section
     */
    image?: (string | null) | Media;
    /**
     * Order of display (lower numbers appear first)
     */
    order?: number | null;
    /**
     * Whether this section is active and visible
     */
    isActive?: boolean | null;
  };
  peos: {
    /**
     * Title of the section
     */
    title: string;
    /**
     * Choose the type of content for this section
     */
    contentType?:
      | ('richText' | 'table' | 'dynamicTable' | 'multipleTables' | 'mixed' | 'mixedDynamic' | 'mixedMultipleTables')
      | null;
    /**
     * Rich text content for this section
     */
    content?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Table data with labels and links
     */
    tableData?:
      | {
          /**
           * Display text for the table row
           */
          label: string;
          /**
           * URL or file path for the link
           */
          link: string;
          /**
           * Check if this is an external link (opens in new tab)
           */
          isExternal?: boolean | null;
          id?: string | null;
        }[]
      | null;
    /**
     * Configure a custom table with multiple columns
     */
    dynamicTableConfig?: {
      /**
       * Paste CSV data here to automatically populate the table. Data will be processed when you save.
       */
      csvInput?: string | null;
      columns: {
        /**
         * Unique identifier for this column (no spaces, use camelCase)
         */
        key: string;
        /**
         * Display label for the column header
         */
        label: string;
        /**
         * Optional CSS width (e.g., "w-20", "w-1/4")
         */
        width?: string | null;
        id?: string | null;
      }[];
      /**
       * Add rows to your table. Each row should have data for all columns.
       */
      rows: {
        /**
         * Add data for each column in this row. Make sure to add cells in the same order as your columns.
         */
        rowData: {
          /**
           * Column key (should match one of your column keys above)
           */
          columnKey: string;
          /**
           * Cell content/value
           */
          value: string;
          /**
           * Make this cell a clickable link
           */
          isLink?: boolean | null;
          /**
           * URL for the link
           */
          linkUrl?: string | null;
          /**
           * External link (opens in new tab)
           */
          isExternal?: boolean | null;
          id?: string | null;
        }[];
        id?: string | null;
      }[];
      /**
       * Visual style of the table
       */
      variant?: ('default' | 'bordered' | 'striped') | null;
    };
    /**
     * Configure multiple custom tables with CSV input support
     */
    multipleTablesConfig?:
      | {
          /**
           * Title for this table
           */
          tableTitle?: string | null;
          /**
           * Paste CSV data here to automatically populate the table. Data will be processed when you save.
           */
          csvInput?: string | null;
          columns: {
            /**
             * Unique identifier for this column (no spaces, use camelCase)
             */
            key: string;
            /**
             * Display label for the column header
             */
            label: string;
            /**
             * Optional CSS width (e.g., "w-20", "w-1/4")
             */
            width?: string | null;
            id?: string | null;
          }[];
          /**
           * Add rows to your table. Each row should have data for all columns.
           */
          rows: {
            /**
             * Add data for each column in this row. Make sure to add cells in the same order as your columns.
             */
            rowData: {
              /**
               * Column key (should match one of your column keys above)
               */
              columnKey: string;
              /**
               * Cell content/value
               */
              value: string;
              /**
               * Make this cell a clickable link
               */
              isLink?: boolean | null;
              /**
               * URL for the link
               */
              linkUrl?: string | null;
              /**
               * External link (opens in new tab)
               */
              isExternal?: boolean | null;
              id?: string | null;
            }[];
            id?: string | null;
          }[];
          /**
           * Visual style of the table
           */
          variant?: ('default' | 'bordered' | 'striped') | null;
          id?: string | null;
        }[]
      | null;
    /**
     * Optional custom title for the table (defaults to "Table Title")
     */
    tableTitle?: string | null;
    /**
     * Optional image for this section
     */
    image?: (string | null) | Media;
    /**
     * Order of display (lower numbers appear first)
     */
    order?: number | null;
    /**
     * Whether this section is active and visible
     */
    isActive?: boolean | null;
    objectives?:
      | {
          title: string;
          description: string;
          id?: string | null;
        }[]
      | null;
  };
  pos: {
    /**
     * Title of the section
     */
    title: string;
    /**
     * Choose the type of content for this section
     */
    contentType?:
      | ('richText' | 'table' | 'dynamicTable' | 'multipleTables' | 'mixed' | 'mixedDynamic' | 'mixedMultipleTables')
      | null;
    /**
     * Rich text content for this section
     */
    content?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Table data with labels and links
     */
    tableData?:
      | {
          /**
           * Display text for the table row
           */
          label: string;
          /**
           * URL or file path for the link
           */
          link: string;
          /**
           * Check if this is an external link (opens in new tab)
           */
          isExternal?: boolean | null;
          id?: string | null;
        }[]
      | null;
    /**
     * Configure a custom table with multiple columns
     */
    dynamicTableConfig?: {
      /**
       * Paste CSV data here to automatically populate the table. Data will be processed when you save.
       */
      csvInput?: string | null;
      columns: {
        /**
         * Unique identifier for this column (no spaces, use camelCase)
         */
        key: string;
        /**
         * Display label for the column header
         */
        label: string;
        /**
         * Optional CSS width (e.g., "w-20", "w-1/4")
         */
        width?: string | null;
        id?: string | null;
      }[];
      /**
       * Add rows to your table. Each row should have data for all columns.
       */
      rows: {
        /**
         * Add data for each column in this row. Make sure to add cells in the same order as your columns.
         */
        rowData: {
          /**
           * Column key (should match one of your column keys above)
           */
          columnKey: string;
          /**
           * Cell content/value
           */
          value: string;
          /**
           * Make this cell a clickable link
           */
          isLink?: boolean | null;
          /**
           * URL for the link
           */
          linkUrl?: string | null;
          /**
           * External link (opens in new tab)
           */
          isExternal?: boolean | null;
          id?: string | null;
        }[];
        id?: string | null;
      }[];
      /**
       * Visual style of the table
       */
      variant?: ('default' | 'bordered' | 'striped') | null;
    };
    /**
     * Configure multiple custom tables with CSV input support
     */
    multipleTablesConfig?:
      | {
          /**
           * Title for this table
           */
          tableTitle?: string | null;
          /**
           * Paste CSV data here to automatically populate the table. Data will be processed when you save.
           */
          csvInput?: string | null;
          columns: {
            /**
             * Unique identifier for this column (no spaces, use camelCase)
             */
            key: string;
            /**
             * Display label for the column header
             */
            label: string;
            /**
             * Optional CSS width (e.g., "w-20", "w-1/4")
             */
            width?: string | null;
            id?: string | null;
          }[];
          /**
           * Add rows to your table. Each row should have data for all columns.
           */
          rows: {
            /**
             * Add data for each column in this row. Make sure to add cells in the same order as your columns.
             */
            rowData: {
              /**
               * Column key (should match one of your column keys above)
               */
              columnKey: string;
              /**
               * Cell content/value
               */
              value: string;
              /**
               * Make this cell a clickable link
               */
              isLink?: boolean | null;
              /**
               * URL for the link
               */
              linkUrl?: string | null;
              /**
               * External link (opens in new tab)
               */
              isExternal?: boolean | null;
              id?: string | null;
            }[];
            id?: string | null;
          }[];
          /**
           * Visual style of the table
           */
          variant?: ('default' | 'bordered' | 'striped') | null;
          id?: string | null;
        }[]
      | null;
    /**
     * Optional custom title for the table (defaults to "Table Title")
     */
    tableTitle?: string | null;
    /**
     * Optional image for this section
     */
    image?: (string | null) | Media;
    /**
     * Order of display (lower numbers appear first)
     */
    order?: number | null;
    /**
     * Whether this section is active and visible
     */
    isActive?: boolean | null;
    outcomes?:
      | {
          title: string;
          description: string;
          id?: string | null;
        }[]
      | null;
  };
  opportunities: {
    /**
     * Title of the section
     */
    title: string;
    /**
     * Choose the type of content for this section
     */
    contentType?:
      | ('richText' | 'table' | 'dynamicTable' | 'multipleTables' | 'mixed' | 'mixedDynamic' | 'mixedMultipleTables')
      | null;
    /**
     * Rich text content for this section
     */
    content?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Table data with labels and links
     */
    tableData?:
      | {
          /**
           * Display text for the table row
           */
          label: string;
          /**
           * URL or file path for the link
           */
          link: string;
          /**
           * Check if this is an external link (opens in new tab)
           */
          isExternal?: boolean | null;
          id?: string | null;
        }[]
      | null;
    /**
     * Configure a custom table with multiple columns
     */
    dynamicTableConfig?: {
      /**
       * Paste CSV data here to automatically populate the table. Data will be processed when you save.
       */
      csvInput?: string | null;
      columns: {
        /**
         * Unique identifier for this column (no spaces, use camelCase)
         */
        key: string;
        /**
         * Display label for the column header
         */
        label: string;
        /**
         * Optional CSS width (e.g., "w-20", "w-1/4")
         */
        width?: string | null;
        id?: string | null;
      }[];
      /**
       * Add rows to your table. Each row should have data for all columns.
       */
      rows: {
        /**
         * Add data for each column in this row. Make sure to add cells in the same order as your columns.
         */
        rowData: {
          /**
           * Column key (should match one of your column keys above)
           */
          columnKey: string;
          /**
           * Cell content/value
           */
          value: string;
          /**
           * Make this cell a clickable link
           */
          isLink?: boolean | null;
          /**
           * URL for the link
           */
          linkUrl?: string | null;
          /**
           * External link (opens in new tab)
           */
          isExternal?: boolean | null;
          id?: string | null;
        }[];
        id?: string | null;
      }[];
      /**
       * Visual style of the table
       */
      variant?: ('default' | 'bordered' | 'striped') | null;
    };
    /**
     * Configure multiple custom tables with CSV input support
     */
    multipleTablesConfig?:
      | {
          /**
           * Title for this table
           */
          tableTitle?: string | null;
          /**
           * Paste CSV data here to automatically populate the table. Data will be processed when you save.
           */
          csvInput?: string | null;
          columns: {
            /**
             * Unique identifier for this column (no spaces, use camelCase)
             */
            key: string;
            /**
             * Display label for the column header
             */
            label: string;
            /**
             * Optional CSS width (e.g., "w-20", "w-1/4")
             */
            width?: string | null;
            id?: string | null;
          }[];
          /**
           * Add rows to your table. Each row should have data for all columns.
           */
          rows: {
            /**
             * Add data for each column in this row. Make sure to add cells in the same order as your columns.
             */
            rowData: {
              /**
               * Column key (should match one of your column keys above)
               */
              columnKey: string;
              /**
               * Cell content/value
               */
              value: string;
              /**
               * Make this cell a clickable link
               */
              isLink?: boolean | null;
              /**
               * URL for the link
               */
              linkUrl?: string | null;
              /**
               * External link (opens in new tab)
               */
              isExternal?: boolean | null;
              id?: string | null;
            }[];
            id?: string | null;
          }[];
          /**
           * Visual style of the table
           */
          variant?: ('default' | 'bordered' | 'striped') | null;
          id?: string | null;
        }[]
      | null;
    /**
     * Optional custom title for the table (defaults to "Table Title")
     */
    tableTitle?: string | null;
    /**
     * Optional image for this section
     */
    image?: (string | null) | Media;
    /**
     * Order of display (lower numbers appear first)
     */
    order?: number | null;
    /**
     * Whether this section is active and visible
     */
    isActive?: boolean | null;
    opportunityList?:
      | {
          title: string;
          description?: string | null;
          image?: (string | null) | Media;
          id?: string | null;
        }[]
      | null;
  };
  labFacility: {
    /**
     * Title of the section
     */
    title: string;
    /**
     * Choose the type of content for this section
     */
    contentType?:
      | ('richText' | 'table' | 'dynamicTable' | 'multipleTables' | 'mixed' | 'mixedDynamic' | 'mixedMultipleTables')
      | null;
    /**
     * Rich text content for this section
     */
    content?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Table data with labels and links
     */
    tableData?:
      | {
          /**
           * Display text for the table row
           */
          label: string;
          /**
           * URL or file path for the link
           */
          link: string;
          /**
           * Check if this is an external link (opens in new tab)
           */
          isExternal?: boolean | null;
          id?: string | null;
        }[]
      | null;
    /**
     * Configure a custom table with multiple columns
     */
    dynamicTableConfig?: {
      /**
       * Paste CSV data here to automatically populate the table. Data will be processed when you save.
       */
      csvInput?: string | null;
      columns: {
        /**
         * Unique identifier for this column (no spaces, use camelCase)
         */
        key: string;
        /**
         * Display label for the column header
         */
        label: string;
        /**
         * Optional CSS width (e.g., "w-20", "w-1/4")
         */
        width?: string | null;
        id?: string | null;
      }[];
      /**
       * Add rows to your table. Each row should have data for all columns.
       */
      rows: {
        /**
         * Add data for each column in this row. Make sure to add cells in the same order as your columns.
         */
        rowData: {
          /**
           * Column key (should match one of your column keys above)
           */
          columnKey: string;
          /**
           * Cell content/value
           */
          value: string;
          /**
           * Make this cell a clickable link
           */
          isLink?: boolean | null;
          /**
           * URL for the link
           */
          linkUrl?: string | null;
          /**
           * External link (opens in new tab)
           */
          isExternal?: boolean | null;
          id?: string | null;
        }[];
        id?: string | null;
      }[];
      /**
       * Visual style of the table
       */
      variant?: ('default' | 'bordered' | 'striped') | null;
    };
    /**
     * Configure multiple custom tables with CSV input support
     */
    multipleTablesConfig?:
      | {
          /**
           * Title for this table
           */
          tableTitle?: string | null;
          /**
           * Paste CSV data here to automatically populate the table. Data will be processed when you save.
           */
          csvInput?: string | null;
          columns: {
            /**
             * Unique identifier for this column (no spaces, use camelCase)
             */
            key: string;
            /**
             * Display label for the column header
             */
            label: string;
            /**
             * Optional CSS width (e.g., "w-20", "w-1/4")
             */
            width?: string | null;
            id?: string | null;
          }[];
          /**
           * Add rows to your table. Each row should have data for all columns.
           */
          rows: {
            /**
             * Add data for each column in this row. Make sure to add cells in the same order as your columns.
             */
            rowData: {
              /**
               * Column key (should match one of your column keys above)
               */
              columnKey: string;
              /**
               * Cell content/value
               */
              value: string;
              /**
               * Make this cell a clickable link
               */
              isLink?: boolean | null;
              /**
               * URL for the link
               */
              linkUrl?: string | null;
              /**
               * External link (opens in new tab)
               */
              isExternal?: boolean | null;
              id?: string | null;
            }[];
            id?: string | null;
          }[];
          /**
           * Visual style of the table
           */
          variant?: ('default' | 'bordered' | 'striped') | null;
          id?: string | null;
        }[]
      | null;
    /**
     * Optional custom title for the table (defaults to "Table Title")
     */
    tableTitle?: string | null;
    /**
     * Optional image for this section
     */
    image?: (string | null) | Media;
    /**
     * Order of display (lower numbers appear first)
     */
    order?: number | null;
    /**
     * Whether this section is active and visible
     */
    isActive?: boolean | null;
    labs?:
      | {
          name: string;
          description: string;
          /**
           * List of equipment/software available
           */
          equipment?: string | null;
          images?:
            | {
                image: string | Media;
                id?: string | null;
              }[]
            | null;
          id?: string | null;
        }[]
      | null;
  };
  faculty: {
    /**
     * Title of the section
     */
    title: string;
    /**
     * Choose the type of content for this section
     */
    contentType?:
      | ('richText' | 'table' | 'dynamicTable' | 'multipleTables' | 'mixed' | 'mixedDynamic' | 'mixedMultipleTables')
      | null;
    /**
     * Rich text content for this section
     */
    content?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Table data with labels and links
     */
    tableData?:
      | {
          /**
           * Display text for the table row
           */
          label: string;
          /**
           * URL or file path for the link
           */
          link: string;
          /**
           * Check if this is an external link (opens in new tab)
           */
          isExternal?: boolean | null;
          id?: string | null;
        }[]
      | null;
    /**
     * Configure a custom table with multiple columns
     */
    dynamicTableConfig?: {
      /**
       * Paste CSV data here to automatically populate the table. Data will be processed when you save.
       */
      csvInput?: string | null;
      columns: {
        /**
         * Unique identifier for this column (no spaces, use camelCase)
         */
        key: string;
        /**
         * Display label for the column header
         */
        label: string;
        /**
         * Optional CSS width (e.g., "w-20", "w-1/4")
         */
        width?: string | null;
        id?: string | null;
      }[];
      /**
       * Add rows to your table. Each row should have data for all columns.
       */
      rows: {
        /**
         * Add data for each column in this row. Make sure to add cells in the same order as your columns.
         */
        rowData: {
          /**
           * Column key (should match one of your column keys above)
           */
          columnKey: string;
          /**
           * Cell content/value
           */
          value: string;
          /**
           * Make this cell a clickable link
           */
          isLink?: boolean | null;
          /**
           * URL for the link
           */
          linkUrl?: string | null;
          /**
           * External link (opens in new tab)
           */
          isExternal?: boolean | null;
          id?: string | null;
        }[];
        id?: string | null;
      }[];
      /**
       * Visual style of the table
       */
      variant?: ('default' | 'bordered' | 'striped') | null;
    };
    /**
     * Configure multiple custom tables with CSV input support
     */
    multipleTablesConfig?:
      | {
          /**
           * Title for this table
           */
          tableTitle?: string | null;
          /**
           * Paste CSV data here to automatically populate the table. Data will be processed when you save.
           */
          csvInput?: string | null;
          columns: {
            /**
             * Unique identifier for this column (no spaces, use camelCase)
             */
            key: string;
            /**
             * Display label for the column header
             */
            label: string;
            /**
             * Optional CSS width (e.g., "w-20", "w-1/4")
             */
            width?: string | null;
            id?: string | null;
          }[];
          /**
           * Add rows to your table. Each row should have data for all columns.
           */
          rows: {
            /**
             * Add data for each column in this row. Make sure to add cells in the same order as your columns.
             */
            rowData: {
              /**
               * Column key (should match one of your column keys above)
               */
              columnKey: string;
              /**
               * Cell content/value
               */
              value: string;
              /**
               * Make this cell a clickable link
               */
              isLink?: boolean | null;
              /**
               * URL for the link
               */
              linkUrl?: string | null;
              /**
               * External link (opens in new tab)
               */
              isExternal?: boolean | null;
              id?: string | null;
            }[];
            id?: string | null;
          }[];
          /**
           * Visual style of the table
           */
          variant?: ('default' | 'bordered' | 'striped') | null;
          id?: string | null;
        }[]
      | null;
    /**
     * Optional custom title for the table (defaults to "Table Title")
     */
    tableTitle?: string | null;
    /**
     * Optional image for this section
     */
    image?: (string | null) | Media;
    /**
     * Order of display (lower numbers appear first)
     */
    order?: number | null;
    /**
     * Whether this section is active and visible
     */
    isActive?: boolean | null;
    facultyMembers?:
      | {
          name: string;
          designation: string;
          qualification?: string | null;
          specialization?: string | null;
          experience?: string | null;
          email?: string | null;
          phone?: string | null;
          image?: (string | null) | Media;
          bio?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  achievements: {
    /**
     * Title of the section
     */
    title: string;
    /**
     * Choose the type of content for this section
     */
    contentType?:
      | ('richText' | 'table' | 'dynamicTable' | 'multipleTables' | 'mixed' | 'mixedDynamic' | 'mixedMultipleTables')
      | null;
    /**
     * Rich text content for this section
     */
    content?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Table data with labels and links
     */
    tableData?:
      | {
          /**
           * Display text for the table row
           */
          label: string;
          /**
           * URL or file path for the link
           */
          link: string;
          /**
           * Check if this is an external link (opens in new tab)
           */
          isExternal?: boolean | null;
          id?: string | null;
        }[]
      | null;
    /**
     * Configure a custom table with multiple columns
     */
    dynamicTableConfig?: {
      /**
       * Paste CSV data here to automatically populate the table. Data will be processed when you save.
       */
      csvInput?: string | null;
      columns: {
        /**
         * Unique identifier for this column (no spaces, use camelCase)
         */
        key: string;
        /**
         * Display label for the column header
         */
        label: string;
        /**
         * Optional CSS width (e.g., "w-20", "w-1/4")
         */
        width?: string | null;
        id?: string | null;
      }[];
      /**
       * Add rows to your table. Each row should have data for all columns.
       */
      rows: {
        /**
         * Add data for each column in this row. Make sure to add cells in the same order as your columns.
         */
        rowData: {
          /**
           * Column key (should match one of your column keys above)
           */
          columnKey: string;
          /**
           * Cell content/value
           */
          value: string;
          /**
           * Make this cell a clickable link
           */
          isLink?: boolean | null;
          /**
           * URL for the link
           */
          linkUrl?: string | null;
          /**
           * External link (opens in new tab)
           */
          isExternal?: boolean | null;
          id?: string | null;
        }[];
        id?: string | null;
      }[];
      /**
       * Visual style of the table
       */
      variant?: ('default' | 'bordered' | 'striped') | null;
    };
    /**
     * Configure multiple custom tables with CSV input support
     */
    multipleTablesConfig?:
      | {
          /**
           * Title for this table
           */
          tableTitle?: string | null;
          /**
           * Paste CSV data here to automatically populate the table. Data will be processed when you save.
           */
          csvInput?: string | null;
          columns: {
            /**
             * Unique identifier for this column (no spaces, use camelCase)
             */
            key: string;
            /**
             * Display label for the column header
             */
            label: string;
            /**
             * Optional CSS width (e.g., "w-20", "w-1/4")
             */
            width?: string | null;
            id?: string | null;
          }[];
          /**
           * Add rows to your table. Each row should have data for all columns.
           */
          rows: {
            /**
             * Add data for each column in this row. Make sure to add cells in the same order as your columns.
             */
            rowData: {
              /**
               * Column key (should match one of your column keys above)
               */
              columnKey: string;
              /**
               * Cell content/value
               */
              value: string;
              /**
               * Make this cell a clickable link
               */
              isLink?: boolean | null;
              /**
               * URL for the link
               */
              linkUrl?: string | null;
              /**
               * External link (opens in new tab)
               */
              isExternal?: boolean | null;
              id?: string | null;
            }[];
            id?: string | null;
          }[];
          /**
           * Visual style of the table
           */
          variant?: ('default' | 'bordered' | 'striped') | null;
          id?: string | null;
        }[]
      | null;
    /**
     * Optional custom title for the table (defaults to "Table Title")
     */
    tableTitle?: string | null;
    /**
     * Optional image for this section
     */
    image?: (string | null) | Media;
    /**
     * Order of display (lower numbers appear first)
     */
    order?: number | null;
    /**
     * Whether this section is active and visible
     */
    isActive?: boolean | null;
    achievementList?:
      | {
          title: string;
          description: string;
          date?: string | null;
          category?: ('academic' | 'research' | 'student' | 'faculty' | 'awards' | 'other') | null;
          image?: (string | null) | Media;
          id?: string | null;
        }[]
      | null;
  };
  classroom: {
    /**
     * Title of the section
     */
    title: string;
    /**
     * Choose the type of content for this section
     */
    contentType?:
      | ('richText' | 'table' | 'dynamicTable' | 'multipleTables' | 'mixed' | 'mixedDynamic' | 'mixedMultipleTables')
      | null;
    /**
     * Rich text content for this section
     */
    content?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Table data with labels and links
     */
    tableData?:
      | {
          /**
           * Display text for the table row
           */
          label: string;
          /**
           * URL or file path for the link
           */
          link: string;
          /**
           * Check if this is an external link (opens in new tab)
           */
          isExternal?: boolean | null;
          id?: string | null;
        }[]
      | null;
    /**
     * Configure a custom table with multiple columns
     */
    dynamicTableConfig?: {
      /**
       * Paste CSV data here to automatically populate the table. Data will be processed when you save.
       */
      csvInput?: string | null;
      columns: {
        /**
         * Unique identifier for this column (no spaces, use camelCase)
         */
        key: string;
        /**
         * Display label for the column header
         */
        label: string;
        /**
         * Optional CSS width (e.g., "w-20", "w-1/4")
         */
        width?: string | null;
        id?: string | null;
      }[];
      /**
       * Add rows to your table. Each row should have data for all columns.
       */
      rows: {
        /**
         * Add data for each column in this row. Make sure to add cells in the same order as your columns.
         */
        rowData: {
          /**
           * Column key (should match one of your column keys above)
           */
          columnKey: string;
          /**
           * Cell content/value
           */
          value: string;
          /**
           * Make this cell a clickable link
           */
          isLink?: boolean | null;
          /**
           * URL for the link
           */
          linkUrl?: string | null;
          /**
           * External link (opens in new tab)
           */
          isExternal?: boolean | null;
          id?: string | null;
        }[];
        id?: string | null;
      }[];
      /**
       * Visual style of the table
       */
      variant?: ('default' | 'bordered' | 'striped') | null;
    };
    /**
     * Configure multiple custom tables with CSV input support
     */
    multipleTablesConfig?:
      | {
          /**
           * Title for this table
           */
          tableTitle?: string | null;
          /**
           * Paste CSV data here to automatically populate the table. Data will be processed when you save.
           */
          csvInput?: string | null;
          columns: {
            /**
             * Unique identifier for this column (no spaces, use camelCase)
             */
            key: string;
            /**
             * Display label for the column header
             */
            label: string;
            /**
             * Optional CSS width (e.g., "w-20", "w-1/4")
             */
            width?: string | null;
            id?: string | null;
          }[];
          /**
           * Add rows to your table. Each row should have data for all columns.
           */
          rows: {
            /**
             * Add data for each column in this row. Make sure to add cells in the same order as your columns.
             */
            rowData: {
              /**
               * Column key (should match one of your column keys above)
               */
              columnKey: string;
              /**
               * Cell content/value
               */
              value: string;
              /**
               * Make this cell a clickable link
               */
              isLink?: boolean | null;
              /**
               * URL for the link
               */
              linkUrl?: string | null;
              /**
               * External link (opens in new tab)
               */
              isExternal?: boolean | null;
              id?: string | null;
            }[];
            id?: string | null;
          }[];
          /**
           * Visual style of the table
           */
          variant?: ('default' | 'bordered' | 'striped') | null;
          id?: string | null;
        }[]
      | null;
    /**
     * Optional custom title for the table (defaults to "Table Title")
     */
    tableTitle?: string | null;
    /**
     * Optional image for this section
     */
    image?: (string | null) | Media;
    /**
     * Order of display (lower numbers appear first)
     */
    order?: number | null;
    /**
     * Whether this section is active and visible
     */
    isActive?: boolean | null;
    classrooms?:
      | {
          name: string;
          capacity?: number | null;
          /**
           * List of facilities available in this classroom
           */
          facilities?: string | null;
          images?:
            | {
                image: string | Media;
                id?: string | null;
              }[]
            | null;
          id?: string | null;
        }[]
      | null;
  };
  facultyPublications: {
    /**
     * Title of the section
     */
    title: string;
    /**
     * Choose the type of content for this section
     */
    contentType?:
      | ('richText' | 'table' | 'dynamicTable' | 'multipleTables' | 'mixed' | 'mixedDynamic' | 'mixedMultipleTables')
      | null;
    /**
     * Rich text content for this section
     */
    content?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Table data with labels and links
     */
    tableData?:
      | {
          /**
           * Display text for the table row
           */
          label: string;
          /**
           * URL or file path for the link
           */
          link: string;
          /**
           * Check if this is an external link (opens in new tab)
           */
          isExternal?: boolean | null;
          id?: string | null;
        }[]
      | null;
    /**
     * Configure a custom table with multiple columns
     */
    dynamicTableConfig?: {
      /**
       * Paste CSV data here to automatically populate the table. Data will be processed when you save.
       */
      csvInput?: string | null;
      columns: {
        /**
         * Unique identifier for this column (no spaces, use camelCase)
         */
        key: string;
        /**
         * Display label for the column header
         */
        label: string;
        /**
         * Optional CSS width (e.g., "w-20", "w-1/4")
         */
        width?: string | null;
        id?: string | null;
      }[];
      /**
       * Add rows to your table. Each row should have data for all columns.
       */
      rows: {
        /**
         * Add data for each column in this row. Make sure to add cells in the same order as your columns.
         */
        rowData: {
          /**
           * Column key (should match one of your column keys above)
           */
          columnKey: string;
          /**
           * Cell content/value
           */
          value: string;
          /**
           * Make this cell a clickable link
           */
          isLink?: boolean | null;
          /**
           * URL for the link
           */
          linkUrl?: string | null;
          /**
           * External link (opens in new tab)
           */
          isExternal?: boolean | null;
          id?: string | null;
        }[];
        id?: string | null;
      }[];
      /**
       * Visual style of the table
       */
      variant?: ('default' | 'bordered' | 'striped') | null;
    };
    /**
     * Configure multiple custom tables with CSV input support
     */
    multipleTablesConfig?:
      | {
          /**
           * Title for this table
           */
          tableTitle?: string | null;
          /**
           * Paste CSV data here to automatically populate the table. Data will be processed when you save.
           */
          csvInput?: string | null;
          columns: {
            /**
             * Unique identifier for this column (no spaces, use camelCase)
             */
            key: string;
            /**
             * Display label for the column header
             */
            label: string;
            /**
             * Optional CSS width (e.g., "w-20", "w-1/4")
             */
            width?: string | null;
            id?: string | null;
          }[];
          /**
           * Add rows to your table. Each row should have data for all columns.
           */
          rows: {
            /**
             * Add data for each column in this row. Make sure to add cells in the same order as your columns.
             */
            rowData: {
              /**
               * Column key (should match one of your column keys above)
               */
              columnKey: string;
              /**
               * Cell content/value
               */
              value: string;
              /**
               * Make this cell a clickable link
               */
              isLink?: boolean | null;
              /**
               * URL for the link
               */
              linkUrl?: string | null;
              /**
               * External link (opens in new tab)
               */
              isExternal?: boolean | null;
              id?: string | null;
            }[];
            id?: string | null;
          }[];
          /**
           * Visual style of the table
           */
          variant?: ('default' | 'bordered' | 'striped') | null;
          id?: string | null;
        }[]
      | null;
    /**
     * Optional custom title for the table (defaults to "Table Title")
     */
    tableTitle?: string | null;
    /**
     * Optional image for this section
     */
    image?: (string | null) | Media;
    /**
     * Order of display (lower numbers appear first)
     */
    order?: number | null;
    /**
     * Whether this section is active and visible
     */
    isActive?: boolean | null;
    publications?:
      | {
          title: string;
          authors: string;
          journal?: string | null;
          conference?: string | null;
          year: number;
          type: 'journal' | 'conference' | 'book_chapter' | 'book' | 'patent' | 'other';
          /**
           * DOI or URL link to the publication
           */
          doi?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  guestLectures: {
    /**
     * Title of the section
     */
    title: string;
    /**
     * Choose the type of content for this section
     */
    contentType?:
      | ('richText' | 'table' | 'dynamicTable' | 'multipleTables' | 'mixed' | 'mixedDynamic' | 'mixedMultipleTables')
      | null;
    /**
     * Rich text content for this section
     */
    content?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Table data with labels and links
     */
    tableData?:
      | {
          /**
           * Display text for the table row
           */
          label: string;
          /**
           * URL or file path for the link
           */
          link: string;
          /**
           * Check if this is an external link (opens in new tab)
           */
          isExternal?: boolean | null;
          id?: string | null;
        }[]
      | null;
    /**
     * Configure a custom table with multiple columns
     */
    dynamicTableConfig?: {
      /**
       * Paste CSV data here to automatically populate the table. Data will be processed when you save.
       */
      csvInput?: string | null;
      columns: {
        /**
         * Unique identifier for this column (no spaces, use camelCase)
         */
        key: string;
        /**
         * Display label for the column header
         */
        label: string;
        /**
         * Optional CSS width (e.g., "w-20", "w-1/4")
         */
        width?: string | null;
        id?: string | null;
      }[];
      /**
       * Add rows to your table. Each row should have data for all columns.
       */
      rows: {
        /**
         * Add data for each column in this row. Make sure to add cells in the same order as your columns.
         */
        rowData: {
          /**
           * Column key (should match one of your column keys above)
           */
          columnKey: string;
          /**
           * Cell content/value
           */
          value: string;
          /**
           * Make this cell a clickable link
           */
          isLink?: boolean | null;
          /**
           * URL for the link
           */
          linkUrl?: string | null;
          /**
           * External link (opens in new tab)
           */
          isExternal?: boolean | null;
          id?: string | null;
        }[];
        id?: string | null;
      }[];
      /**
       * Visual style of the table
       */
      variant?: ('default' | 'bordered' | 'striped') | null;
    };
    /**
     * Configure multiple custom tables with CSV input support
     */
    multipleTablesConfig?:
      | {
          /**
           * Title for this table
           */
          tableTitle?: string | null;
          /**
           * Paste CSV data here to automatically populate the table. Data will be processed when you save.
           */
          csvInput?: string | null;
          columns: {
            /**
             * Unique identifier for this column (no spaces, use camelCase)
             */
            key: string;
            /**
             * Display label for the column header
             */
            label: string;
            /**
             * Optional CSS width (e.g., "w-20", "w-1/4")
             */
            width?: string | null;
            id?: string | null;
          }[];
          /**
           * Add rows to your table. Each row should have data for all columns.
           */
          rows: {
            /**
             * Add data for each column in this row. Make sure to add cells in the same order as your columns.
             */
            rowData: {
              /**
               * Column key (should match one of your column keys above)
               */
              columnKey: string;
              /**
               * Cell content/value
               */
              value: string;
              /**
               * Make this cell a clickable link
               */
              isLink?: boolean | null;
              /**
               * URL for the link
               */
              linkUrl?: string | null;
              /**
               * External link (opens in new tab)
               */
              isExternal?: boolean | null;
              id?: string | null;
            }[];
            id?: string | null;
          }[];
          /**
           * Visual style of the table
           */
          variant?: ('default' | 'bordered' | 'striped') | null;
          id?: string | null;
        }[]
      | null;
    /**
     * Optional custom title for the table (defaults to "Table Title")
     */
    tableTitle?: string | null;
    /**
     * Optional image for this section
     */
    image?: (string | null) | Media;
    /**
     * Order of display (lower numbers appear first)
     */
    order?: number | null;
    /**
     * Whether this section is active and visible
     */
    isActive?: boolean | null;
    lectures?:
      | {
          title: string;
          speaker: string;
          speakerDesignation?: string | null;
          organization?: string | null;
          date: string;
          description?: string | null;
          image?: (string | null) | Media;
          id?: string | null;
        }[]
      | null;
  };
  mous: {
    /**
     * Title of the section
     */
    title: string;
    /**
     * Choose the type of content for this section
     */
    contentType?:
      | ('richText' | 'table' | 'dynamicTable' | 'multipleTables' | 'mixed' | 'mixedDynamic' | 'mixedMultipleTables')
      | null;
    /**
     * Rich text content for this section
     */
    content?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Table data with labels and links
     */
    tableData?:
      | {
          /**
           * Display text for the table row
           */
          label: string;
          /**
           * URL or file path for the link
           */
          link: string;
          /**
           * Check if this is an external link (opens in new tab)
           */
          isExternal?: boolean | null;
          id?: string | null;
        }[]
      | null;
    /**
     * Configure a custom table with multiple columns
     */
    dynamicTableConfig?: {
      /**
       * Paste CSV data here to automatically populate the table. Data will be processed when you save.
       */
      csvInput?: string | null;
      columns: {
        /**
         * Unique identifier for this column (no spaces, use camelCase)
         */
        key: string;
        /**
         * Display label for the column header
         */
        label: string;
        /**
         * Optional CSS width (e.g., "w-20", "w-1/4")
         */
        width?: string | null;
        id?: string | null;
      }[];
      /**
       * Add rows to your table. Each row should have data for all columns.
       */
      rows: {
        /**
         * Add data for each column in this row. Make sure to add cells in the same order as your columns.
         */
        rowData: {
          /**
           * Column key (should match one of your column keys above)
           */
          columnKey: string;
          /**
           * Cell content/value
           */
          value: string;
          /**
           * Make this cell a clickable link
           */
          isLink?: boolean | null;
          /**
           * URL for the link
           */
          linkUrl?: string | null;
          /**
           * External link (opens in new tab)
           */
          isExternal?: boolean | null;
          id?: string | null;
        }[];
        id?: string | null;
      }[];
      /**
       * Visual style of the table
       */
      variant?: ('default' | 'bordered' | 'striped') | null;
    };
    /**
     * Configure multiple custom tables with CSV input support
     */
    multipleTablesConfig?:
      | {
          /**
           * Title for this table
           */
          tableTitle?: string | null;
          /**
           * Paste CSV data here to automatically populate the table. Data will be processed when you save.
           */
          csvInput?: string | null;
          columns: {
            /**
             * Unique identifier for this column (no spaces, use camelCase)
             */
            key: string;
            /**
             * Display label for the column header
             */
            label: string;
            /**
             * Optional CSS width (e.g., "w-20", "w-1/4")
             */
            width?: string | null;
            id?: string | null;
          }[];
          /**
           * Add rows to your table. Each row should have data for all columns.
           */
          rows: {
            /**
             * Add data for each column in this row. Make sure to add cells in the same order as your columns.
             */
            rowData: {
              /**
               * Column key (should match one of your column keys above)
               */
              columnKey: string;
              /**
               * Cell content/value
               */
              value: string;
              /**
               * Make this cell a clickable link
               */
              isLink?: boolean | null;
              /**
               * URL for the link
               */
              linkUrl?: string | null;
              /**
               * External link (opens in new tab)
               */
              isExternal?: boolean | null;
              id?: string | null;
            }[];
            id?: string | null;
          }[];
          /**
           * Visual style of the table
           */
          variant?: ('default' | 'bordered' | 'striped') | null;
          id?: string | null;
        }[]
      | null;
    /**
     * Optional custom title for the table (defaults to "Table Title")
     */
    tableTitle?: string | null;
    /**
     * Optional image for this section
     */
    image?: (string | null) | Media;
    /**
     * Order of display (lower numbers appear first)
     */
    order?: number | null;
    /**
     * Whether this section is active and visible
     */
    isActive?: boolean | null;
    mouList?:
      | {
          organization: string;
          purpose: string;
          dateOfSigning?: string | null;
          /**
           * Duration of the MoU (e.g., 3 years)
           */
          duration?: string | null;
          status?: ('active' | 'expired' | 'renewed') | null;
          /**
           * MoU document (PDF)
           */
          document?: (string | null) | Media;
          id?: string | null;
        }[]
      | null;
  };
  universityRankHolders: {
    /**
     * Title of the section
     */
    title: string;
    /**
     * Choose the type of content for this section
     */
    contentType?:
      | ('richText' | 'table' | 'dynamicTable' | 'multipleTables' | 'mixed' | 'mixedDynamic' | 'mixedMultipleTables')
      | null;
    /**
     * Rich text content for this section
     */
    content?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Table data with labels and links
     */
    tableData?:
      | {
          /**
           * Display text for the table row
           */
          label: string;
          /**
           * URL or file path for the link
           */
          link: string;
          /**
           * Check if this is an external link (opens in new tab)
           */
          isExternal?: boolean | null;
          id?: string | null;
        }[]
      | null;
    /**
     * Configure a custom table with multiple columns
     */
    dynamicTableConfig?: {
      /**
       * Paste CSV data here to automatically populate the table. Data will be processed when you save.
       */
      csvInput?: string | null;
      columns: {
        /**
         * Unique identifier for this column (no spaces, use camelCase)
         */
        key: string;
        /**
         * Display label for the column header
         */
        label: string;
        /**
         * Optional CSS width (e.g., "w-20", "w-1/4")
         */
        width?: string | null;
        id?: string | null;
      }[];
      /**
       * Add rows to your table. Each row should have data for all columns.
       */
      rows: {
        /**
         * Add data for each column in this row. Make sure to add cells in the same order as your columns.
         */
        rowData: {
          /**
           * Column key (should match one of your column keys above)
           */
          columnKey: string;
          /**
           * Cell content/value
           */
          value: string;
          /**
           * Make this cell a clickable link
           */
          isLink?: boolean | null;
          /**
           * URL for the link
           */
          linkUrl?: string | null;
          /**
           * External link (opens in new tab)
           */
          isExternal?: boolean | null;
          id?: string | null;
        }[];
        id?: string | null;
      }[];
      /**
       * Visual style of the table
       */
      variant?: ('default' | 'bordered' | 'striped') | null;
    };
    /**
     * Configure multiple custom tables with CSV input support
     */
    multipleTablesConfig?:
      | {
          /**
           * Title for this table
           */
          tableTitle?: string | null;
          /**
           * Paste CSV data here to automatically populate the table. Data will be processed when you save.
           */
          csvInput?: string | null;
          columns: {
            /**
             * Unique identifier for this column (no spaces, use camelCase)
             */
            key: string;
            /**
             * Display label for the column header
             */
            label: string;
            /**
             * Optional CSS width (e.g., "w-20", "w-1/4")
             */
            width?: string | null;
            id?: string | null;
          }[];
          /**
           * Add rows to your table. Each row should have data for all columns.
           */
          rows: {
            /**
             * Add data for each column in this row. Make sure to add cells in the same order as your columns.
             */
            rowData: {
              /**
               * Column key (should match one of your column keys above)
               */
              columnKey: string;
              /**
               * Cell content/value
               */
              value: string;
              /**
               * Make this cell a clickable link
               */
              isLink?: boolean | null;
              /**
               * URL for the link
               */
              linkUrl?: string | null;
              /**
               * External link (opens in new tab)
               */
              isExternal?: boolean | null;
              id?: string | null;
            }[];
            id?: string | null;
          }[];
          /**
           * Visual style of the table
           */
          variant?: ('default' | 'bordered' | 'striped') | null;
          id?: string | null;
        }[]
      | null;
    /**
     * Optional custom title for the table (defaults to "Table Title")
     */
    tableTitle?: string | null;
    /**
     * Optional image for this section
     */
    image?: (string | null) | Media;
    /**
     * Order of display (lower numbers appear first)
     */
    order?: number | null;
    /**
     * Whether this section is active and visible
     */
    isActive?: boolean | null;
    rankHolders?:
      | {
          studentName: string;
          rank: number;
          /**
           * Academic year in format: 2024-25
           */
          academicYear: string;
          /**
           * Course/Program (e.g., B.E CSE, M.E CSE)
           */
          course: string;
          /**
           * CGPA/Percentage achieved
           */
          cgpa?: number | null;
          photo?: (string | null) | Media;
          /**
           * Current job/position of the student
           */
          currentPosition?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * Manage secondary navigation links (IIC, IIIC, IQAC, etc.)
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "secondary-nav".
 */
export interface SecondaryNav {
  id: string;
  /**
   * Display text for the navigation link (e.g., "IIC", "IQAC")
   */
  label: string;
  /**
   * URL path for the navigation link (e.g., "/iic", "/iqac")
   */
  href: string;
  /**
   * Whether this navigation item is active and visible
   */
  isActive?: boolean | null;
  /**
   * Display order (higher numbers appear first)
   */
  order?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Create and manage multiple dynamic pages with flexible content types
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "dynamic-pages".
 */
export interface DynamicPage {
  id: string;
  /**
   * Title of the page (used for admin display)
   */
  pageTitle: string;
  /**
   * URL slug for this page (e.g., "about-us", "contact")
   */
  slug: string;
  /**
   * Category to help organize and filter pages
   */
  category?:
    | (
        | 'general'
        | 'academic'
        | 'administrative'
        | 'student-resources'
        | 'faculty-resources'
        | 'research'
        | 'events-news'
        | 'other'
      )
    | null;
  /**
   * Whether this page is published and accessible
   */
  isPublished?: boolean | null;
  /**
   * Priority for ordering pages (higher numbers appear first)
   */
  priority?: number | null;
  seo?: {
    /**
     * Meta title for SEO (defaults to hero title if empty). Recommended: 50-60 characters
     */
    metaTitle?: string | null;
    /**
     * Meta description for SEO and social media previews. Recommended: 150-160 characters
     */
    metaDescription?: string | null;
    /**
     * SEO keywords (comma-separated). Focus on 3-5 relevant keywords
     */
    keywords?: string | null;
    /**
     * Open Graph title for social media sharing (defaults to meta title if empty)
     */
    ogTitle?: string | null;
    /**
     * Open Graph description for social media sharing (defaults to meta description if empty)
     */
    ogDescription?: string | null;
    /**
     * Open Graph image for social media sharing (recommended: 1200x630px)
     */
    ogImage?: (string | null) | Media;
    /**
     * Twitter card type for Twitter sharing
     */
    twitterCard?: ('summary' | 'summary_large_image') | null;
    /**
     * Prevent search engines from indexing this page
     */
    noIndex?: boolean | null;
    /**
     * Prevent search engines from following links on this page
     */
    noFollow?: boolean | null;
    /**
     * Canonical URL for this page (leave empty to use current page URL)
     */
    canonicalUrl?: string | null;
  };
  /**
   * Main hero title for the page
   */
  heroTitle: string;
  /**
   * Hero subtitle displayed below the main title
   */
  heroSubtitle?: string | null;
  sections?:
    | {
        /**
         * Title of the section
         */
        title: string;
        /**
         * Choose the type of content for this section
         */
        contentType?:
          | (
              | 'richText'
              | 'table'
              | 'dynamicTable'
              | 'multipleTables'
              | 'mixed'
              | 'mixedDynamic'
              | 'mixedMultipleTables'
            )
          | null;
        /**
         * Rich text content for this section
         */
        content?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        /**
         * Table data with labels and links
         */
        tableData?:
          | {
              /**
               * Display text for the table row
               */
              label: string;
              /**
               * URL or file path for the link
               */
              link: string;
              /**
               * Check if this is an external link (opens in new tab)
               */
              isExternal?: boolean | null;
              id?: string | null;
            }[]
          | null;
        /**
         * Configure a custom table with multiple columns
         */
        dynamicTableConfig?: {
          /**
           * Paste CSV data here to automatically populate the table. Data will be processed when you save.
           */
          csvInput?: string | null;
          columns: {
            /**
             * Unique identifier for this column (no spaces, use camelCase)
             */
            key: string;
            /**
             * Display label for the column header
             */
            label: string;
            /**
             * Optional CSS width (e.g., "w-20", "w-1/4")
             */
            width?: string | null;
            id?: string | null;
          }[];
          /**
           * Add rows to your table. Each row should have data for all columns.
           */
          rows: {
            /**
             * Add data for each column in this row. Make sure to add cells in the same order as your columns.
             */
            rowData: {
              /**
               * Column key (should match one of your column keys above)
               */
              columnKey: string;
              /**
               * Cell content/value
               */
              value: string;
              /**
               * Make this cell a clickable link
               */
              isLink?: boolean | null;
              /**
               * URL for the link
               */
              linkUrl?: string | null;
              /**
               * External link (opens in new tab)
               */
              isExternal?: boolean | null;
              id?: string | null;
            }[];
            id?: string | null;
          }[];
          /**
           * Visual style of the table
           */
          variant?: ('default' | 'bordered' | 'striped') | null;
        };
        /**
         * Configure multiple custom tables with CSV input support
         */
        multipleTablesConfig?:
          | {
              /**
               * Title for this table
               */
              tableTitle?: string | null;
              /**
               * Paste CSV data here to automatically populate the table. Data will be processed when you save.
               */
              csvInput?: string | null;
              columns: {
                /**
                 * Unique identifier for this column (no spaces, use camelCase)
                 */
                key: string;
                /**
                 * Display label for the column header
                 */
                label: string;
                /**
                 * Optional CSS width (e.g., "w-20", "w-1/4")
                 */
                width?: string | null;
                id?: string | null;
              }[];
              /**
               * Add rows to your table. Each row should have data for all columns.
               */
              rows: {
                /**
                 * Add data for each column in this row. Make sure to add cells in the same order as your columns.
                 */
                rowData: {
                  /**
                   * Column key (should match one of your column keys above)
                   */
                  columnKey: string;
                  /**
                   * Cell content/value
                   */
                  value: string;
                  /**
                   * Make this cell a clickable link
                   */
                  isLink?: boolean | null;
                  /**
                   * URL for the link
                   */
                  linkUrl?: string | null;
                  /**
                   * External link (opens in new tab)
                   */
                  isExternal?: boolean | null;
                  id?: string | null;
                }[];
                id?: string | null;
              }[];
              /**
               * Visual style of the table
               */
              variant?: ('default' | 'bordered' | 'striped') | null;
              id?: string | null;
            }[]
          | null;
        /**
         * Optional custom title for the table (defaults to "Table Title")
         */
        tableTitle?: string | null;
        /**
         * Optional image for this section
         */
        image?: (string | null) | Media;
        /**
         * Order of display (lower numbers appear first)
         */
        order?: number | null;
        /**
         * Whether this section is active and visible
         */
        isActive?: boolean | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'announcements';
        value: string | Announcement;
      } | null)
    | ({
        relationTo: 'home-slider';
        value: string | HomeSlider;
      } | null)
    | ({
        relationTo: 'blog-posts';
        value: string | BlogPost;
      } | null)
    | ({
        relationTo: 'testimonials';
        value: string | Testimonial;
      } | null)
    | ({
        relationTo: 'coe';
        value: string | Coe;
      } | null)
    | ({
        relationTo: 'coe-categories';
        value: string | CoeCategory;
      } | null)
    | ({
        relationTo: 'departments';
        value: string | Department;
      } | null)
    | ({
        relationTo: 'department-sections';
        value: string | DepartmentSection;
      } | null)
    | ({
        relationTo: 'secondary-nav';
        value: string | SecondaryNav;
      } | null)
    | ({
        relationTo: 'dynamic-pages';
        value: string | DynamicPage;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  role?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  uploadedBy?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "announcements_select".
 */
export interface AnnouncementsSelect<T extends boolean = true> {
  title?: T;
  content?: T;
  link?: T;
  linkText?: T;
  isActive?: T;
  priority?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "home-slider_select".
 */
export interface HomeSliderSelect<T extends boolean = true> {
  title?: T;
  desktopImage?: T;
  mobileImage?: T;
  link?: T;
  isActive?: T;
  order?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blog-posts_select".
 */
export interface BlogPostsSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  excerpt?: T;
  content?: T;
  featuredImage?: T;
  author?: T;
  isPublished?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "testimonials_select".
 */
export interface TestimonialsSelect<T extends boolean = true> {
  quote?: T;
  authorName?: T;
  authorTitle?: T;
  authorImage?: T;
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "coe_select".
 */
export interface CoeSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  category?: T;
  pdfFile?: T;
  isActive?: T;
  priority?: T;
  downloadCount?: T;
  tags?:
    | T
    | {
        tag?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "coe-categories_select".
 */
export interface CoeCategoriesSelect<T extends boolean = true> {
  name?: T;
  description?: T;
  icon?: T;
  isActive?: T;
  order?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "departments_select".
 */
export interface DepartmentsSelect<T extends boolean = true> {
  name?: T;
  code?: T;
  slug?: T;
  shortName?: T;
  description?: T;
  isActive?: T;
  order?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "department-sections_select".
 */
export interface DepartmentSectionsSelect<T extends boolean = true> {
  department?: T;
  title?: T;
  isActive?: T;
  dynamicSections?:
    | T
    | {
        title?: T;
        contentType?: T;
        content?: T;
        tableData?:
          | T
          | {
              label?: T;
              link?: T;
              isExternal?: T;
              id?: T;
            };
        dynamicTableConfig?:
          | T
          | {
              csvInput?: T;
              columns?:
                | T
                | {
                    key?: T;
                    label?: T;
                    width?: T;
                    id?: T;
                  };
              rows?:
                | T
                | {
                    rowData?:
                      | T
                      | {
                          columnKey?: T;
                          value?: T;
                          isLink?: T;
                          linkUrl?: T;
                          isExternal?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              variant?: T;
            };
        multipleTablesConfig?:
          | T
          | {
              tableTitle?: T;
              csvInput?: T;
              columns?:
                | T
                | {
                    key?: T;
                    label?: T;
                    width?: T;
                    id?: T;
                  };
              rows?:
                | T
                | {
                    rowData?:
                      | T
                      | {
                          columnKey?: T;
                          value?: T;
                          isLink?: T;
                          linkUrl?: T;
                          isExternal?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              variant?: T;
              id?: T;
            };
        tableTitle?: T;
        image?: T;
        order?: T;
        isActive?: T;
        id?: T;
      };
  introduction?:
    | T
    | {
        title?: T;
        contentType?: T;
        content?: T;
        tableData?:
          | T
          | {
              label?: T;
              link?: T;
              isExternal?: T;
              id?: T;
            };
        dynamicTableConfig?:
          | T
          | {
              csvInput?: T;
              columns?:
                | T
                | {
                    key?: T;
                    label?: T;
                    width?: T;
                    id?: T;
                  };
              rows?:
                | T
                | {
                    rowData?:
                      | T
                      | {
                          columnKey?: T;
                          value?: T;
                          isLink?: T;
                          linkUrl?: T;
                          isExternal?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              variant?: T;
            };
        multipleTablesConfig?:
          | T
          | {
              tableTitle?: T;
              csvInput?: T;
              columns?:
                | T
                | {
                    key?: T;
                    label?: T;
                    width?: T;
                    id?: T;
                  };
              rows?:
                | T
                | {
                    rowData?:
                      | T
                      | {
                          columnKey?: T;
                          value?: T;
                          isLink?: T;
                          linkUrl?: T;
                          isExternal?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              variant?: T;
              id?: T;
            };
        tableTitle?: T;
        image?: T;
        order?: T;
        isActive?: T;
      };
  peos?:
    | T
    | {
        title?: T;
        contentType?: T;
        content?: T;
        tableData?:
          | T
          | {
              label?: T;
              link?: T;
              isExternal?: T;
              id?: T;
            };
        dynamicTableConfig?:
          | T
          | {
              csvInput?: T;
              columns?:
                | T
                | {
                    key?: T;
                    label?: T;
                    width?: T;
                    id?: T;
                  };
              rows?:
                | T
                | {
                    rowData?:
                      | T
                      | {
                          columnKey?: T;
                          value?: T;
                          isLink?: T;
                          linkUrl?: T;
                          isExternal?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              variant?: T;
            };
        multipleTablesConfig?:
          | T
          | {
              tableTitle?: T;
              csvInput?: T;
              columns?:
                | T
                | {
                    key?: T;
                    label?: T;
                    width?: T;
                    id?: T;
                  };
              rows?:
                | T
                | {
                    rowData?:
                      | T
                      | {
                          columnKey?: T;
                          value?: T;
                          isLink?: T;
                          linkUrl?: T;
                          isExternal?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              variant?: T;
              id?: T;
            };
        tableTitle?: T;
        image?: T;
        order?: T;
        isActive?: T;
        objectives?:
          | T
          | {
              title?: T;
              description?: T;
              id?: T;
            };
      };
  pos?:
    | T
    | {
        title?: T;
        contentType?: T;
        content?: T;
        tableData?:
          | T
          | {
              label?: T;
              link?: T;
              isExternal?: T;
              id?: T;
            };
        dynamicTableConfig?:
          | T
          | {
              csvInput?: T;
              columns?:
                | T
                | {
                    key?: T;
                    label?: T;
                    width?: T;
                    id?: T;
                  };
              rows?:
                | T
                | {
                    rowData?:
                      | T
                      | {
                          columnKey?: T;
                          value?: T;
                          isLink?: T;
                          linkUrl?: T;
                          isExternal?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              variant?: T;
            };
        multipleTablesConfig?:
          | T
          | {
              tableTitle?: T;
              csvInput?: T;
              columns?:
                | T
                | {
                    key?: T;
                    label?: T;
                    width?: T;
                    id?: T;
                  };
              rows?:
                | T
                | {
                    rowData?:
                      | T
                      | {
                          columnKey?: T;
                          value?: T;
                          isLink?: T;
                          linkUrl?: T;
                          isExternal?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              variant?: T;
              id?: T;
            };
        tableTitle?: T;
        image?: T;
        order?: T;
        isActive?: T;
        outcomes?:
          | T
          | {
              title?: T;
              description?: T;
              id?: T;
            };
      };
  opportunities?:
    | T
    | {
        title?: T;
        contentType?: T;
        content?: T;
        tableData?:
          | T
          | {
              label?: T;
              link?: T;
              isExternal?: T;
              id?: T;
            };
        dynamicTableConfig?:
          | T
          | {
              csvInput?: T;
              columns?:
                | T
                | {
                    key?: T;
                    label?: T;
                    width?: T;
                    id?: T;
                  };
              rows?:
                | T
                | {
                    rowData?:
                      | T
                      | {
                          columnKey?: T;
                          value?: T;
                          isLink?: T;
                          linkUrl?: T;
                          isExternal?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              variant?: T;
            };
        multipleTablesConfig?:
          | T
          | {
              tableTitle?: T;
              csvInput?: T;
              columns?:
                | T
                | {
                    key?: T;
                    label?: T;
                    width?: T;
                    id?: T;
                  };
              rows?:
                | T
                | {
                    rowData?:
                      | T
                      | {
                          columnKey?: T;
                          value?: T;
                          isLink?: T;
                          linkUrl?: T;
                          isExternal?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              variant?: T;
              id?: T;
            };
        tableTitle?: T;
        image?: T;
        order?: T;
        isActive?: T;
        opportunityList?:
          | T
          | {
              title?: T;
              description?: T;
              image?: T;
              id?: T;
            };
      };
  labFacility?:
    | T
    | {
        title?: T;
        contentType?: T;
        content?: T;
        tableData?:
          | T
          | {
              label?: T;
              link?: T;
              isExternal?: T;
              id?: T;
            };
        dynamicTableConfig?:
          | T
          | {
              csvInput?: T;
              columns?:
                | T
                | {
                    key?: T;
                    label?: T;
                    width?: T;
                    id?: T;
                  };
              rows?:
                | T
                | {
                    rowData?:
                      | T
                      | {
                          columnKey?: T;
                          value?: T;
                          isLink?: T;
                          linkUrl?: T;
                          isExternal?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              variant?: T;
            };
        multipleTablesConfig?:
          | T
          | {
              tableTitle?: T;
              csvInput?: T;
              columns?:
                | T
                | {
                    key?: T;
                    label?: T;
                    width?: T;
                    id?: T;
                  };
              rows?:
                | T
                | {
                    rowData?:
                      | T
                      | {
                          columnKey?: T;
                          value?: T;
                          isLink?: T;
                          linkUrl?: T;
                          isExternal?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              variant?: T;
              id?: T;
            };
        tableTitle?: T;
        image?: T;
        order?: T;
        isActive?: T;
        labs?:
          | T
          | {
              name?: T;
              description?: T;
              equipment?: T;
              images?:
                | T
                | {
                    image?: T;
                    id?: T;
                  };
              id?: T;
            };
      };
  faculty?:
    | T
    | {
        title?: T;
        contentType?: T;
        content?: T;
        tableData?:
          | T
          | {
              label?: T;
              link?: T;
              isExternal?: T;
              id?: T;
            };
        dynamicTableConfig?:
          | T
          | {
              csvInput?: T;
              columns?:
                | T
                | {
                    key?: T;
                    label?: T;
                    width?: T;
                    id?: T;
                  };
              rows?:
                | T
                | {
                    rowData?:
                      | T
                      | {
                          columnKey?: T;
                          value?: T;
                          isLink?: T;
                          linkUrl?: T;
                          isExternal?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              variant?: T;
            };
        multipleTablesConfig?:
          | T
          | {
              tableTitle?: T;
              csvInput?: T;
              columns?:
                | T
                | {
                    key?: T;
                    label?: T;
                    width?: T;
                    id?: T;
                  };
              rows?:
                | T
                | {
                    rowData?:
                      | T
                      | {
                          columnKey?: T;
                          value?: T;
                          isLink?: T;
                          linkUrl?: T;
                          isExternal?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              variant?: T;
              id?: T;
            };
        tableTitle?: T;
        image?: T;
        order?: T;
        isActive?: T;
        facultyMembers?:
          | T
          | {
              name?: T;
              designation?: T;
              qualification?: T;
              specialization?: T;
              experience?: T;
              email?: T;
              phone?: T;
              image?: T;
              bio?: T;
              id?: T;
            };
      };
  achievements?:
    | T
    | {
        title?: T;
        contentType?: T;
        content?: T;
        tableData?:
          | T
          | {
              label?: T;
              link?: T;
              isExternal?: T;
              id?: T;
            };
        dynamicTableConfig?:
          | T
          | {
              csvInput?: T;
              columns?:
                | T
                | {
                    key?: T;
                    label?: T;
                    width?: T;
                    id?: T;
                  };
              rows?:
                | T
                | {
                    rowData?:
                      | T
                      | {
                          columnKey?: T;
                          value?: T;
                          isLink?: T;
                          linkUrl?: T;
                          isExternal?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              variant?: T;
            };
        multipleTablesConfig?:
          | T
          | {
              tableTitle?: T;
              csvInput?: T;
              columns?:
                | T
                | {
                    key?: T;
                    label?: T;
                    width?: T;
                    id?: T;
                  };
              rows?:
                | T
                | {
                    rowData?:
                      | T
                      | {
                          columnKey?: T;
                          value?: T;
                          isLink?: T;
                          linkUrl?: T;
                          isExternal?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              variant?: T;
              id?: T;
            };
        tableTitle?: T;
        image?: T;
        order?: T;
        isActive?: T;
        achievementList?:
          | T
          | {
              title?: T;
              description?: T;
              date?: T;
              category?: T;
              image?: T;
              id?: T;
            };
      };
  classroom?:
    | T
    | {
        title?: T;
        contentType?: T;
        content?: T;
        tableData?:
          | T
          | {
              label?: T;
              link?: T;
              isExternal?: T;
              id?: T;
            };
        dynamicTableConfig?:
          | T
          | {
              csvInput?: T;
              columns?:
                | T
                | {
                    key?: T;
                    label?: T;
                    width?: T;
                    id?: T;
                  };
              rows?:
                | T
                | {
                    rowData?:
                      | T
                      | {
                          columnKey?: T;
                          value?: T;
                          isLink?: T;
                          linkUrl?: T;
                          isExternal?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              variant?: T;
            };
        multipleTablesConfig?:
          | T
          | {
              tableTitle?: T;
              csvInput?: T;
              columns?:
                | T
                | {
                    key?: T;
                    label?: T;
                    width?: T;
                    id?: T;
                  };
              rows?:
                | T
                | {
                    rowData?:
                      | T
                      | {
                          columnKey?: T;
                          value?: T;
                          isLink?: T;
                          linkUrl?: T;
                          isExternal?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              variant?: T;
              id?: T;
            };
        tableTitle?: T;
        image?: T;
        order?: T;
        isActive?: T;
        classrooms?:
          | T
          | {
              name?: T;
              capacity?: T;
              facilities?: T;
              images?:
                | T
                | {
                    image?: T;
                    id?: T;
                  };
              id?: T;
            };
      };
  facultyPublications?:
    | T
    | {
        title?: T;
        contentType?: T;
        content?: T;
        tableData?:
          | T
          | {
              label?: T;
              link?: T;
              isExternal?: T;
              id?: T;
            };
        dynamicTableConfig?:
          | T
          | {
              csvInput?: T;
              columns?:
                | T
                | {
                    key?: T;
                    label?: T;
                    width?: T;
                    id?: T;
                  };
              rows?:
                | T
                | {
                    rowData?:
                      | T
                      | {
                          columnKey?: T;
                          value?: T;
                          isLink?: T;
                          linkUrl?: T;
                          isExternal?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              variant?: T;
            };
        multipleTablesConfig?:
          | T
          | {
              tableTitle?: T;
              csvInput?: T;
              columns?:
                | T
                | {
                    key?: T;
                    label?: T;
                    width?: T;
                    id?: T;
                  };
              rows?:
                | T
                | {
                    rowData?:
                      | T
                      | {
                          columnKey?: T;
                          value?: T;
                          isLink?: T;
                          linkUrl?: T;
                          isExternal?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              variant?: T;
              id?: T;
            };
        tableTitle?: T;
        image?: T;
        order?: T;
        isActive?: T;
        publications?:
          | T
          | {
              title?: T;
              authors?: T;
              journal?: T;
              conference?: T;
              year?: T;
              type?: T;
              doi?: T;
              id?: T;
            };
      };
  guestLectures?:
    | T
    | {
        title?: T;
        contentType?: T;
        content?: T;
        tableData?:
          | T
          | {
              label?: T;
              link?: T;
              isExternal?: T;
              id?: T;
            };
        dynamicTableConfig?:
          | T
          | {
              csvInput?: T;
              columns?:
                | T
                | {
                    key?: T;
                    label?: T;
                    width?: T;
                    id?: T;
                  };
              rows?:
                | T
                | {
                    rowData?:
                      | T
                      | {
                          columnKey?: T;
                          value?: T;
                          isLink?: T;
                          linkUrl?: T;
                          isExternal?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              variant?: T;
            };
        multipleTablesConfig?:
          | T
          | {
              tableTitle?: T;
              csvInput?: T;
              columns?:
                | T
                | {
                    key?: T;
                    label?: T;
                    width?: T;
                    id?: T;
                  };
              rows?:
                | T
                | {
                    rowData?:
                      | T
                      | {
                          columnKey?: T;
                          value?: T;
                          isLink?: T;
                          linkUrl?: T;
                          isExternal?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              variant?: T;
              id?: T;
            };
        tableTitle?: T;
        image?: T;
        order?: T;
        isActive?: T;
        lectures?:
          | T
          | {
              title?: T;
              speaker?: T;
              speakerDesignation?: T;
              organization?: T;
              date?: T;
              description?: T;
              image?: T;
              id?: T;
            };
      };
  mous?:
    | T
    | {
        title?: T;
        contentType?: T;
        content?: T;
        tableData?:
          | T
          | {
              label?: T;
              link?: T;
              isExternal?: T;
              id?: T;
            };
        dynamicTableConfig?:
          | T
          | {
              csvInput?: T;
              columns?:
                | T
                | {
                    key?: T;
                    label?: T;
                    width?: T;
                    id?: T;
                  };
              rows?:
                | T
                | {
                    rowData?:
                      | T
                      | {
                          columnKey?: T;
                          value?: T;
                          isLink?: T;
                          linkUrl?: T;
                          isExternal?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              variant?: T;
            };
        multipleTablesConfig?:
          | T
          | {
              tableTitle?: T;
              csvInput?: T;
              columns?:
                | T
                | {
                    key?: T;
                    label?: T;
                    width?: T;
                    id?: T;
                  };
              rows?:
                | T
                | {
                    rowData?:
                      | T
                      | {
                          columnKey?: T;
                          value?: T;
                          isLink?: T;
                          linkUrl?: T;
                          isExternal?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              variant?: T;
              id?: T;
            };
        tableTitle?: T;
        image?: T;
        order?: T;
        isActive?: T;
        mouList?:
          | T
          | {
              organization?: T;
              purpose?: T;
              dateOfSigning?: T;
              duration?: T;
              status?: T;
              document?: T;
              id?: T;
            };
      };
  universityRankHolders?:
    | T
    | {
        title?: T;
        contentType?: T;
        content?: T;
        tableData?:
          | T
          | {
              label?: T;
              link?: T;
              isExternal?: T;
              id?: T;
            };
        dynamicTableConfig?:
          | T
          | {
              csvInput?: T;
              columns?:
                | T
                | {
                    key?: T;
                    label?: T;
                    width?: T;
                    id?: T;
                  };
              rows?:
                | T
                | {
                    rowData?:
                      | T
                      | {
                          columnKey?: T;
                          value?: T;
                          isLink?: T;
                          linkUrl?: T;
                          isExternal?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              variant?: T;
            };
        multipleTablesConfig?:
          | T
          | {
              tableTitle?: T;
              csvInput?: T;
              columns?:
                | T
                | {
                    key?: T;
                    label?: T;
                    width?: T;
                    id?: T;
                  };
              rows?:
                | T
                | {
                    rowData?:
                      | T
                      | {
                          columnKey?: T;
                          value?: T;
                          isLink?: T;
                          linkUrl?: T;
                          isExternal?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              variant?: T;
              id?: T;
            };
        tableTitle?: T;
        image?: T;
        order?: T;
        isActive?: T;
        rankHolders?:
          | T
          | {
              studentName?: T;
              rank?: T;
              academicYear?: T;
              course?: T;
              cgpa?: T;
              photo?: T;
              currentPosition?: T;
              id?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "secondary-nav_select".
 */
export interface SecondaryNavSelect<T extends boolean = true> {
  label?: T;
  href?: T;
  isActive?: T;
  order?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "dynamic-pages_select".
 */
export interface DynamicPagesSelect<T extends boolean = true> {
  pageTitle?: T;
  slug?: T;
  category?: T;
  isPublished?: T;
  priority?: T;
  seo?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        keywords?: T;
        ogTitle?: T;
        ogDescription?: T;
        ogImage?: T;
        twitterCard?: T;
        noIndex?: T;
        noFollow?: T;
        canonicalUrl?: T;
      };
  heroTitle?: T;
  heroSubtitle?: T;
  sections?:
    | T
    | {
        title?: T;
        contentType?: T;
        content?: T;
        tableData?:
          | T
          | {
              label?: T;
              link?: T;
              isExternal?: T;
              id?: T;
            };
        dynamicTableConfig?:
          | T
          | {
              csvInput?: T;
              columns?:
                | T
                | {
                    key?: T;
                    label?: T;
                    width?: T;
                    id?: T;
                  };
              rows?:
                | T
                | {
                    rowData?:
                      | T
                      | {
                          columnKey?: T;
                          value?: T;
                          isLink?: T;
                          linkUrl?: T;
                          isExternal?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              variant?: T;
            };
        multipleTablesConfig?:
          | T
          | {
              tableTitle?: T;
              csvInput?: T;
              columns?:
                | T
                | {
                    key?: T;
                    label?: T;
                    width?: T;
                    id?: T;
                  };
              rows?:
                | T
                | {
                    rowData?:
                      | T
                      | {
                          columnKey?: T;
                          value?: T;
                          isLink?: T;
                          linkUrl?: T;
                          isExternal?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              variant?: T;
              id?: T;
            };
        tableTitle?: T;
        image?: T;
        order?: T;
        isActive?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * Manage About page content
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "about".
 */
export interface About {
  id: string;
  seo?: {
    /**
     * Meta title for SEO (defaults to hero title if empty). Recommended: 50-60 characters
     */
    metaTitle?: string | null;
    /**
     * Meta description for SEO and social media previews. Recommended: 150-160 characters
     */
    metaDescription?: string | null;
    /**
     * SEO keywords (comma-separated). Focus on 3-5 relevant keywords
     */
    keywords?: string | null;
    /**
     * Open Graph title for social media sharing (defaults to meta title if empty)
     */
    ogTitle?: string | null;
    /**
     * Open Graph description for social media sharing (defaults to meta description if empty)
     */
    ogDescription?: string | null;
    /**
     * Open Graph image for social media sharing (recommended: 1200x630px)
     */
    ogImage?: (string | null) | Media;
    /**
     * Twitter card type for Twitter sharing
     */
    twitterCard?: ('summary' | 'summary_large_image') | null;
    /**
     * Prevent search engines from indexing this page
     */
    noIndex?: boolean | null;
    /**
     * Prevent search engines from following links on this page
     */
    noFollow?: boolean | null;
    /**
     * Canonical URL for this page (leave empty to use current page URL)
     */
    canonicalUrl?: string | null;
  };
  /**
   * Main hero title for the about page
   */
  heroTitle: string;
  /**
   * Hero subtitle displayed below the main title
   */
  heroSubtitle?: string | null;
  sections?:
    | {
        /**
         * Title of the section
         */
        title: string;
        /**
         * Choose the type of content for this section
         */
        contentType?:
          | (
              | 'richText'
              | 'table'
              | 'dynamicTable'
              | 'multipleTables'
              | 'mixed'
              | 'mixedDynamic'
              | 'mixedMultipleTables'
            )
          | null;
        /**
         * Rich text content for this section
         */
        content?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        /**
         * Table data with labels and links
         */
        tableData?:
          | {
              /**
               * Display text for the table row
               */
              label: string;
              /**
               * URL or file path for the link
               */
              link: string;
              /**
               * Check if this is an external link (opens in new tab)
               */
              isExternal?: boolean | null;
              id?: string | null;
            }[]
          | null;
        /**
         * Configure a custom table with multiple columns
         */
        dynamicTableConfig?: {
          /**
           * Paste CSV data here to automatically populate the table. Data will be processed when you save.
           */
          csvInput?: string | null;
          columns: {
            /**
             * Unique identifier for this column (no spaces, use camelCase)
             */
            key: string;
            /**
             * Display label for the column header
             */
            label: string;
            /**
             * Optional CSS width (e.g., "w-20", "w-1/4")
             */
            width?: string | null;
            id?: string | null;
          }[];
          /**
           * Add rows to your table. Each row should have data for all columns.
           */
          rows: {
            /**
             * Add data for each column in this row. Make sure to add cells in the same order as your columns.
             */
            rowData: {
              /**
               * Column key (should match one of your column keys above)
               */
              columnKey: string;
              /**
               * Cell content/value
               */
              value: string;
              /**
               * Make this cell a clickable link
               */
              isLink?: boolean | null;
              /**
               * URL for the link
               */
              linkUrl?: string | null;
              /**
               * External link (opens in new tab)
               */
              isExternal?: boolean | null;
              id?: string | null;
            }[];
            id?: string | null;
          }[];
          /**
           * Visual style of the table
           */
          variant?: ('default' | 'bordered' | 'striped') | null;
        };
        /**
         * Configure multiple custom tables with CSV input support
         */
        multipleTablesConfig?:
          | {
              /**
               * Title for this table
               */
              tableTitle?: string | null;
              /**
               * Paste CSV data here to automatically populate the table. Data will be processed when you save.
               */
              csvInput?: string | null;
              columns: {
                /**
                 * Unique identifier for this column (no spaces, use camelCase)
                 */
                key: string;
                /**
                 * Display label for the column header
                 */
                label: string;
                /**
                 * Optional CSS width (e.g., "w-20", "w-1/4")
                 */
                width?: string | null;
                id?: string | null;
              }[];
              /**
               * Add rows to your table. Each row should have data for all columns.
               */
              rows: {
                /**
                 * Add data for each column in this row. Make sure to add cells in the same order as your columns.
                 */
                rowData: {
                  /**
                   * Column key (should match one of your column keys above)
                   */
                  columnKey: string;
                  /**
                   * Cell content/value
                   */
                  value: string;
                  /**
                   * Make this cell a clickable link
                   */
                  isLink?: boolean | null;
                  /**
                   * URL for the link
                   */
                  linkUrl?: string | null;
                  /**
                   * External link (opens in new tab)
                   */
                  isExternal?: boolean | null;
                  id?: string | null;
                }[];
                id?: string | null;
              }[];
              /**
               * Visual style of the table
               */
              variant?: ('default' | 'bordered' | 'striped') | null;
              id?: string | null;
            }[]
          | null;
        /**
         * Optional custom title for the table (defaults to "Table Title")
         */
        tableTitle?: string | null;
        /**
         * Optional image for this section
         */
        image?: (string | null) | Media;
        /**
         * Order of display (lower numbers appear first)
         */
        order?: number | null;
        /**
         * Whether this section is active and visible
         */
        isActive?: boolean | null;
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * Manage Admissions page content
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "admissions".
 */
export interface Admission {
  id: string;
  seo?: {
    /**
     * Meta title for SEO (defaults to hero title if empty). Recommended: 50-60 characters
     */
    metaTitle?: string | null;
    /**
     * Meta description for SEO and social media previews. Recommended: 150-160 characters
     */
    metaDescription?: string | null;
    /**
     * SEO keywords (comma-separated). Focus on 3-5 relevant keywords
     */
    keywords?: string | null;
    /**
     * Open Graph title for social media sharing (defaults to meta title if empty)
     */
    ogTitle?: string | null;
    /**
     * Open Graph description for social media sharing (defaults to meta description if empty)
     */
    ogDescription?: string | null;
    /**
     * Open Graph image for social media sharing (recommended: 1200x630px)
     */
    ogImage?: (string | null) | Media;
    /**
     * Twitter card type for Twitter sharing
     */
    twitterCard?: ('summary' | 'summary_large_image') | null;
    /**
     * Prevent search engines from indexing this page
     */
    noIndex?: boolean | null;
    /**
     * Prevent search engines from following links on this page
     */
    noFollow?: boolean | null;
    /**
     * Canonical URL for this page (leave empty to use current page URL)
     */
    canonicalUrl?: string | null;
  };
  /**
   * Main hero title for the admissions page
   */
  heroTitle: string;
  /**
   * Hero subtitle displayed below the main title
   */
  heroSubtitle?: string | null;
  sections?:
    | {
        /**
         * Title of the section
         */
        title: string;
        /**
         * Choose the type of content for this section
         */
        contentType?:
          | (
              | 'richText'
              | 'table'
              | 'dynamicTable'
              | 'multipleTables'
              | 'mixed'
              | 'mixedDynamic'
              | 'mixedMultipleTables'
            )
          | null;
        /**
         * Rich text content for this section
         */
        content?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        /**
         * Table data with labels and links
         */
        tableData?:
          | {
              /**
               * Display text for the table row
               */
              label: string;
              /**
               * URL or file path for the link
               */
              link: string;
              /**
               * Check if this is an external link (opens in new tab)
               */
              isExternal?: boolean | null;
              id?: string | null;
            }[]
          | null;
        /**
         * Configure a custom table with multiple columns
         */
        dynamicTableConfig?: {
          /**
           * Paste CSV data here to automatically populate the table. Data will be processed when you save.
           */
          csvInput?: string | null;
          columns: {
            /**
             * Unique identifier for this column (no spaces, use camelCase)
             */
            key: string;
            /**
             * Display label for the column header
             */
            label: string;
            /**
             * Optional CSS width (e.g., "w-20", "w-1/4")
             */
            width?: string | null;
            id?: string | null;
          }[];
          /**
           * Add rows to your table. Each row should have data for all columns.
           */
          rows: {
            /**
             * Add data for each column in this row. Make sure to add cells in the same order as your columns.
             */
            rowData: {
              /**
               * Column key (should match one of your column keys above)
               */
              columnKey: string;
              /**
               * Cell content/value
               */
              value: string;
              /**
               * Make this cell a clickable link
               */
              isLink?: boolean | null;
              /**
               * URL for the link
               */
              linkUrl?: string | null;
              /**
               * External link (opens in new tab)
               */
              isExternal?: boolean | null;
              id?: string | null;
            }[];
            id?: string | null;
          }[];
          /**
           * Visual style of the table
           */
          variant?: ('default' | 'bordered' | 'striped') | null;
        };
        /**
         * Configure multiple custom tables with CSV input support
         */
        multipleTablesConfig?:
          | {
              /**
               * Title for this table
               */
              tableTitle?: string | null;
              /**
               * Paste CSV data here to automatically populate the table. Data will be processed when you save.
               */
              csvInput?: string | null;
              columns: {
                /**
                 * Unique identifier for this column (no spaces, use camelCase)
                 */
                key: string;
                /**
                 * Display label for the column header
                 */
                label: string;
                /**
                 * Optional CSS width (e.g., "w-20", "w-1/4")
                 */
                width?: string | null;
                id?: string | null;
              }[];
              /**
               * Add rows to your table. Each row should have data for all columns.
               */
              rows: {
                /**
                 * Add data for each column in this row. Make sure to add cells in the same order as your columns.
                 */
                rowData: {
                  /**
                   * Column key (should match one of your column keys above)
                   */
                  columnKey: string;
                  /**
                   * Cell content/value
                   */
                  value: string;
                  /**
                   * Make this cell a clickable link
                   */
                  isLink?: boolean | null;
                  /**
                   * URL for the link
                   */
                  linkUrl?: string | null;
                  /**
                   * External link (opens in new tab)
                   */
                  isExternal?: boolean | null;
                  id?: string | null;
                }[];
                id?: string | null;
              }[];
              /**
               * Visual style of the table
               */
              variant?: ('default' | 'bordered' | 'striped') | null;
              id?: string | null;
            }[]
          | null;
        /**
         * Optional custom title for the table (defaults to "Table Title")
         */
        tableTitle?: string | null;
        /**
         * Optional image for this section
         */
        image?: (string | null) | Media;
        /**
         * Order of display (lower numbers appear first)
         */
        order?: number | null;
        /**
         * Whether this section is active and visible
         */
        isActive?: boolean | null;
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * Manage Research page content
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "research".
 */
export interface Research {
  id: string;
  seo?: {
    /**
     * Meta title for SEO (defaults to hero title if empty). Recommended: 50-60 characters
     */
    metaTitle?: string | null;
    /**
     * Meta description for SEO and social media previews. Recommended: 150-160 characters
     */
    metaDescription?: string | null;
    /**
     * SEO keywords (comma-separated). Focus on 3-5 relevant keywords
     */
    keywords?: string | null;
    /**
     * Open Graph title for social media sharing (defaults to meta title if empty)
     */
    ogTitle?: string | null;
    /**
     * Open Graph description for social media sharing (defaults to meta description if empty)
     */
    ogDescription?: string | null;
    /**
     * Open Graph image for social media sharing (recommended: 1200x630px)
     */
    ogImage?: (string | null) | Media;
    /**
     * Twitter card type for Twitter sharing
     */
    twitterCard?: ('summary' | 'summary_large_image') | null;
    /**
     * Prevent search engines from indexing this page
     */
    noIndex?: boolean | null;
    /**
     * Prevent search engines from following links on this page
     */
    noFollow?: boolean | null;
    /**
     * Canonical URL for this page (leave empty to use current page URL)
     */
    canonicalUrl?: string | null;
  };
  /**
   * Main hero title for the research page
   */
  heroTitle: string;
  /**
   * Hero subtitle displayed below the main title
   */
  heroSubtitle?: string | null;
  sections?:
    | {
        /**
         * Title of the section
         */
        title: string;
        /**
         * Choose the type of content for this section
         */
        contentType?:
          | (
              | 'richText'
              | 'table'
              | 'dynamicTable'
              | 'multipleTables'
              | 'mixed'
              | 'mixedDynamic'
              | 'mixedMultipleTables'
            )
          | null;
        /**
         * Rich text content for this section
         */
        content?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        /**
         * Table data with labels and links
         */
        tableData?:
          | {
              /**
               * Display text for the table row
               */
              label: string;
              /**
               * URL or file path for the link
               */
              link: string;
              /**
               * Check if this is an external link (opens in new tab)
               */
              isExternal?: boolean | null;
              id?: string | null;
            }[]
          | null;
        /**
         * Configure a custom table with multiple columns
         */
        dynamicTableConfig?: {
          /**
           * Paste CSV data here to automatically populate the table. Data will be processed when you save.
           */
          csvInput?: string | null;
          columns: {
            /**
             * Unique identifier for this column (no spaces, use camelCase)
             */
            key: string;
            /**
             * Display label for the column header
             */
            label: string;
            /**
             * Optional CSS width (e.g., "w-20", "w-1/4")
             */
            width?: string | null;
            id?: string | null;
          }[];
          /**
           * Add rows to your table. Each row should have data for all columns.
           */
          rows: {
            /**
             * Add data for each column in this row. Make sure to add cells in the same order as your columns.
             */
            rowData: {
              /**
               * Column key (should match one of your column keys above)
               */
              columnKey: string;
              /**
               * Cell content/value
               */
              value: string;
              /**
               * Make this cell a clickable link
               */
              isLink?: boolean | null;
              /**
               * URL for the link
               */
              linkUrl?: string | null;
              /**
               * External link (opens in new tab)
               */
              isExternal?: boolean | null;
              id?: string | null;
            }[];
            id?: string | null;
          }[];
          /**
           * Visual style of the table
           */
          variant?: ('default' | 'bordered' | 'striped') | null;
        };
        /**
         * Configure multiple custom tables with CSV input support
         */
        multipleTablesConfig?:
          | {
              /**
               * Title for this table
               */
              tableTitle?: string | null;
              /**
               * Paste CSV data here to automatically populate the table. Data will be processed when you save.
               */
              csvInput?: string | null;
              columns: {
                /**
                 * Unique identifier for this column (no spaces, use camelCase)
                 */
                key: string;
                /**
                 * Display label for the column header
                 */
                label: string;
                /**
                 * Optional CSS width (e.g., "w-20", "w-1/4")
                 */
                width?: string | null;
                id?: string | null;
              }[];
              /**
               * Add rows to your table. Each row should have data for all columns.
               */
              rows: {
                /**
                 * Add data for each column in this row. Make sure to add cells in the same order as your columns.
                 */
                rowData: {
                  /**
                   * Column key (should match one of your column keys above)
                   */
                  columnKey: string;
                  /**
                   * Cell content/value
                   */
                  value: string;
                  /**
                   * Make this cell a clickable link
                   */
                  isLink?: boolean | null;
                  /**
                   * URL for the link
                   */
                  linkUrl?: string | null;
                  /**
                   * External link (opens in new tab)
                   */
                  isExternal?: boolean | null;
                  id?: string | null;
                }[];
                id?: string | null;
              }[];
              /**
               * Visual style of the table
               */
              variant?: ('default' | 'bordered' | 'striped') | null;
              id?: string | null;
            }[]
          | null;
        /**
         * Optional custom title for the table (defaults to "Table Title")
         */
        tableTitle?: string | null;
        /**
         * Optional image for this section
         */
        image?: (string | null) | Media;
        /**
         * Order of display (lower numbers appear first)
         */
        order?: number | null;
        /**
         * Whether this section is active and visible
         */
        isActive?: boolean | null;
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * Manage Placement page content
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "placement".
 */
export interface Placement {
  id: string;
  seo?: {
    /**
     * Meta title for SEO (defaults to hero title if empty). Recommended: 50-60 characters
     */
    metaTitle?: string | null;
    /**
     * Meta description for SEO and social media previews. Recommended: 150-160 characters
     */
    metaDescription?: string | null;
    /**
     * SEO keywords (comma-separated). Focus on 3-5 relevant keywords
     */
    keywords?: string | null;
    /**
     * Open Graph title for social media sharing (defaults to meta title if empty)
     */
    ogTitle?: string | null;
    /**
     * Open Graph description for social media sharing (defaults to meta description if empty)
     */
    ogDescription?: string | null;
    /**
     * Open Graph image for social media sharing (recommended: 1200x630px)
     */
    ogImage?: (string | null) | Media;
    /**
     * Twitter card type for Twitter sharing
     */
    twitterCard?: ('summary' | 'summary_large_image') | null;
    /**
     * Prevent search engines from indexing this page
     */
    noIndex?: boolean | null;
    /**
     * Prevent search engines from following links on this page
     */
    noFollow?: boolean | null;
    /**
     * Canonical URL for this page (leave empty to use current page URL)
     */
    canonicalUrl?: string | null;
  };
  /**
   * Main hero title for the placement page
   */
  heroTitle: string;
  /**
   * Hero subtitle displayed below the main title
   */
  heroSubtitle?: string | null;
  sections?:
    | {
        /**
         * Title of the section
         */
        title: string;
        /**
         * Choose the type of content for this section
         */
        contentType?:
          | (
              | 'richText'
              | 'table'
              | 'dynamicTable'
              | 'multipleTables'
              | 'mixed'
              | 'mixedDynamic'
              | 'mixedMultipleTables'
            )
          | null;
        /**
         * Rich text content for this section
         */
        content?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        /**
         * Table data with labels and links
         */
        tableData?:
          | {
              /**
               * Display text for the table row
               */
              label: string;
              /**
               * URL or file path for the link
               */
              link: string;
              /**
               * Check if this is an external link (opens in new tab)
               */
              isExternal?: boolean | null;
              id?: string | null;
            }[]
          | null;
        /**
         * Configure a custom table with multiple columns
         */
        dynamicTableConfig?: {
          /**
           * Paste CSV data here to automatically populate the table. Data will be processed when you save.
           */
          csvInput?: string | null;
          columns: {
            /**
             * Unique identifier for this column (no spaces, use camelCase)
             */
            key: string;
            /**
             * Display label for the column header
             */
            label: string;
            /**
             * Optional CSS width (e.g., "w-20", "w-1/4")
             */
            width?: string | null;
            id?: string | null;
          }[];
          /**
           * Add rows to your table. Each row should have data for all columns.
           */
          rows: {
            /**
             * Add data for each column in this row. Make sure to add cells in the same order as your columns.
             */
            rowData: {
              /**
               * Column key (should match one of your column keys above)
               */
              columnKey: string;
              /**
               * Cell content/value
               */
              value: string;
              /**
               * Make this cell a clickable link
               */
              isLink?: boolean | null;
              /**
               * URL for the link
               */
              linkUrl?: string | null;
              /**
               * External link (opens in new tab)
               */
              isExternal?: boolean | null;
              id?: string | null;
            }[];
            id?: string | null;
          }[];
          /**
           * Visual style of the table
           */
          variant?: ('default' | 'bordered' | 'striped') | null;
        };
        /**
         * Configure multiple custom tables with CSV input support
         */
        multipleTablesConfig?:
          | {
              /**
               * Title for this table
               */
              tableTitle?: string | null;
              /**
               * Paste CSV data here to automatically populate the table. Data will be processed when you save.
               */
              csvInput?: string | null;
              columns: {
                /**
                 * Unique identifier for this column (no spaces, use camelCase)
                 */
                key: string;
                /**
                 * Display label for the column header
                 */
                label: string;
                /**
                 * Optional CSS width (e.g., "w-20", "w-1/4")
                 */
                width?: string | null;
                id?: string | null;
              }[];
              /**
               * Add rows to your table. Each row should have data for all columns.
               */
              rows: {
                /**
                 * Add data for each column in this row. Make sure to add cells in the same order as your columns.
                 */
                rowData: {
                  /**
                   * Column key (should match one of your column keys above)
                   */
                  columnKey: string;
                  /**
                   * Cell content/value
                   */
                  value: string;
                  /**
                   * Make this cell a clickable link
                   */
                  isLink?: boolean | null;
                  /**
                   * URL for the link
                   */
                  linkUrl?: string | null;
                  /**
                   * External link (opens in new tab)
                   */
                  isExternal?: boolean | null;
                  id?: string | null;
                }[];
                id?: string | null;
              }[];
              /**
               * Visual style of the table
               */
              variant?: ('default' | 'bordered' | 'striped') | null;
              id?: string | null;
            }[]
          | null;
        /**
         * Optional custom title for the table (defaults to "Table Title")
         */
        tableTitle?: string | null;
        /**
         * Optional image for this section
         */
        image?: (string | null) | Media;
        /**
         * Order of display (lower numbers appear first)
         */
        order?: number | null;
        /**
         * Whether this section is active and visible
         */
        isActive?: boolean | null;
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * Manage International Relations page content
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "international-relations".
 */
export interface InternationalRelation {
  id: string;
  seo?: {
    /**
     * Meta title for SEO (defaults to hero title if empty). Recommended: 50-60 characters
     */
    metaTitle?: string | null;
    /**
     * Meta description for SEO and social media previews. Recommended: 150-160 characters
     */
    metaDescription?: string | null;
    /**
     * SEO keywords (comma-separated). Focus on 3-5 relevant keywords
     */
    keywords?: string | null;
    /**
     * Open Graph title for social media sharing (defaults to meta title if empty)
     */
    ogTitle?: string | null;
    /**
     * Open Graph description for social media sharing (defaults to meta description if empty)
     */
    ogDescription?: string | null;
    /**
     * Open Graph image for social media sharing (recommended: 1200x630px)
     */
    ogImage?: (string | null) | Media;
    /**
     * Twitter card type for Twitter sharing
     */
    twitterCard?: ('summary' | 'summary_large_image') | null;
    /**
     * Prevent search engines from indexing this page
     */
    noIndex?: boolean | null;
    /**
     * Prevent search engines from following links on this page
     */
    noFollow?: boolean | null;
    /**
     * Canonical URL for this page (leave empty to use current page URL)
     */
    canonicalUrl?: string | null;
  };
  /**
   * Main hero title for the international relations page
   */
  heroTitle: string;
  /**
   * Hero subtitle displayed below the main title
   */
  heroSubtitle?: string | null;
  sections?:
    | {
        /**
         * Title of the section
         */
        title: string;
        /**
         * Choose the type of content for this section
         */
        contentType?:
          | (
              | 'richText'
              | 'table'
              | 'dynamicTable'
              | 'multipleTables'
              | 'mixed'
              | 'mixedDynamic'
              | 'mixedMultipleTables'
            )
          | null;
        /**
         * Rich text content for this section
         */
        content?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        /**
         * Table data with labels and links
         */
        tableData?:
          | {
              /**
               * Display text for the table row
               */
              label: string;
              /**
               * URL or file path for the link
               */
              link: string;
              /**
               * Check if this is an external link (opens in new tab)
               */
              isExternal?: boolean | null;
              id?: string | null;
            }[]
          | null;
        /**
         * Configure a custom table with multiple columns
         */
        dynamicTableConfig?: {
          /**
           * Paste CSV data here to automatically populate the table. Data will be processed when you save.
           */
          csvInput?: string | null;
          columns: {
            /**
             * Unique identifier for this column (no spaces, use camelCase)
             */
            key: string;
            /**
             * Display label for the column header
             */
            label: string;
            /**
             * Optional CSS width (e.g., "w-20", "w-1/4")
             */
            width?: string | null;
            id?: string | null;
          }[];
          /**
           * Add rows to your table. Each row should have data for all columns.
           */
          rows: {
            /**
             * Add data for each column in this row. Make sure to add cells in the same order as your columns.
             */
            rowData: {
              /**
               * Column key (should match one of your column keys above)
               */
              columnKey: string;
              /**
               * Cell content/value
               */
              value: string;
              /**
               * Make this cell a clickable link
               */
              isLink?: boolean | null;
              /**
               * URL for the link
               */
              linkUrl?: string | null;
              /**
               * External link (opens in new tab)
               */
              isExternal?: boolean | null;
              id?: string | null;
            }[];
            id?: string | null;
          }[];
          /**
           * Visual style of the table
           */
          variant?: ('default' | 'bordered' | 'striped') | null;
        };
        /**
         * Configure multiple custom tables with CSV input support
         */
        multipleTablesConfig?:
          | {
              /**
               * Title for this table
               */
              tableTitle?: string | null;
              /**
               * Paste CSV data here to automatically populate the table. Data will be processed when you save.
               */
              csvInput?: string | null;
              columns: {
                /**
                 * Unique identifier for this column (no spaces, use camelCase)
                 */
                key: string;
                /**
                 * Display label for the column header
                 */
                label: string;
                /**
                 * Optional CSS width (e.g., "w-20", "w-1/4")
                 */
                width?: string | null;
                id?: string | null;
              }[];
              /**
               * Add rows to your table. Each row should have data for all columns.
               */
              rows: {
                /**
                 * Add data for each column in this row. Make sure to add cells in the same order as your columns.
                 */
                rowData: {
                  /**
                   * Column key (should match one of your column keys above)
                   */
                  columnKey: string;
                  /**
                   * Cell content/value
                   */
                  value: string;
                  /**
                   * Make this cell a clickable link
                   */
                  isLink?: boolean | null;
                  /**
                   * URL for the link
                   */
                  linkUrl?: string | null;
                  /**
                   * External link (opens in new tab)
                   */
                  isExternal?: boolean | null;
                  id?: string | null;
                }[];
                id?: string | null;
              }[];
              /**
               * Visual style of the table
               */
              variant?: ('default' | 'bordered' | 'striped') | null;
              id?: string | null;
            }[]
          | null;
        /**
         * Optional custom title for the table (defaults to "Table Title")
         */
        tableTitle?: string | null;
        /**
         * Optional image for this section
         */
        image?: (string | null) | Media;
        /**
         * Order of display (lower numbers appear first)
         */
        order?: number | null;
        /**
         * Whether this section is active and visible
         */
        isActive?: boolean | null;
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * Manage Academics page content
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "academics".
 */
export interface Academic {
  id: string;
  seo?: {
    /**
     * Meta title for SEO (defaults to hero title if empty). Recommended: 50-60 characters
     */
    metaTitle?: string | null;
    /**
     * Meta description for SEO and social media previews. Recommended: 150-160 characters
     */
    metaDescription?: string | null;
    /**
     * SEO keywords (comma-separated). Focus on 3-5 relevant keywords
     */
    keywords?: string | null;
    /**
     * Open Graph title for social media sharing (defaults to meta title if empty)
     */
    ogTitle?: string | null;
    /**
     * Open Graph description for social media sharing (defaults to meta description if empty)
     */
    ogDescription?: string | null;
    /**
     * Open Graph image for social media sharing (recommended: 1200x630px)
     */
    ogImage?: (string | null) | Media;
    /**
     * Twitter card type for Twitter sharing
     */
    twitterCard?: ('summary' | 'summary_large_image') | null;
    /**
     * Prevent search engines from indexing this page
     */
    noIndex?: boolean | null;
    /**
     * Prevent search engines from following links on this page
     */
    noFollow?: boolean | null;
    /**
     * Canonical URL for this page (leave empty to use current page URL)
     */
    canonicalUrl?: string | null;
  };
  /**
   * Main hero title for the academics page
   */
  heroTitle: string;
  /**
   * Hero subtitle displayed below the main title
   */
  heroSubtitle?: string | null;
  sections?:
    | {
        /**
         * Title of the section
         */
        title: string;
        /**
         * Choose the type of content for this section
         */
        contentType?:
          | (
              | 'richText'
              | 'table'
              | 'dynamicTable'
              | 'multipleTables'
              | 'mixed'
              | 'mixedDynamic'
              | 'mixedMultipleTables'
            )
          | null;
        /**
         * Rich text content for this section
         */
        content?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        /**
         * Table data with labels and links
         */
        tableData?:
          | {
              /**
               * Display text for the table row
               */
              label: string;
              /**
               * URL or file path for the link
               */
              link: string;
              /**
               * Check if this is an external link (opens in new tab)
               */
              isExternal?: boolean | null;
              id?: string | null;
            }[]
          | null;
        /**
         * Configure a custom table with multiple columns
         */
        dynamicTableConfig?: {
          /**
           * Paste CSV data here to automatically populate the table. Data will be processed when you save.
           */
          csvInput?: string | null;
          columns: {
            /**
             * Unique identifier for this column (no spaces, use camelCase)
             */
            key: string;
            /**
             * Display label for the column header
             */
            label: string;
            /**
             * Optional CSS width (e.g., "w-20", "w-1/4")
             */
            width?: string | null;
            id?: string | null;
          }[];
          /**
           * Add rows to your table. Each row should have data for all columns.
           */
          rows: {
            /**
             * Add data for each column in this row. Make sure to add cells in the same order as your columns.
             */
            rowData: {
              /**
               * Column key (should match one of your column keys above)
               */
              columnKey: string;
              /**
               * Cell content/value
               */
              value: string;
              /**
               * Make this cell a clickable link
               */
              isLink?: boolean | null;
              /**
               * URL for the link
               */
              linkUrl?: string | null;
              /**
               * External link (opens in new tab)
               */
              isExternal?: boolean | null;
              id?: string | null;
            }[];
            id?: string | null;
          }[];
          /**
           * Visual style of the table
           */
          variant?: ('default' | 'bordered' | 'striped') | null;
        };
        /**
         * Configure multiple custom tables with CSV input support
         */
        multipleTablesConfig?:
          | {
              /**
               * Title for this table
               */
              tableTitle?: string | null;
              /**
               * Paste CSV data here to automatically populate the table. Data will be processed when you save.
               */
              csvInput?: string | null;
              columns: {
                /**
                 * Unique identifier for this column (no spaces, use camelCase)
                 */
                key: string;
                /**
                 * Display label for the column header
                 */
                label: string;
                /**
                 * Optional CSS width (e.g., "w-20", "w-1/4")
                 */
                width?: string | null;
                id?: string | null;
              }[];
              /**
               * Add rows to your table. Each row should have data for all columns.
               */
              rows: {
                /**
                 * Add data for each column in this row. Make sure to add cells in the same order as your columns.
                 */
                rowData: {
                  /**
                   * Column key (should match one of your column keys above)
                   */
                  columnKey: string;
                  /**
                   * Cell content/value
                   */
                  value: string;
                  /**
                   * Make this cell a clickable link
                   */
                  isLink?: boolean | null;
                  /**
                   * URL for the link
                   */
                  linkUrl?: string | null;
                  /**
                   * External link (opens in new tab)
                   */
                  isExternal?: boolean | null;
                  id?: string | null;
                }[];
                id?: string | null;
              }[];
              /**
               * Visual style of the table
               */
              variant?: ('default' | 'bordered' | 'striped') | null;
              id?: string | null;
            }[]
          | null;
        /**
         * Optional custom title for the table (defaults to "Table Title")
         */
        tableTitle?: string | null;
        /**
         * Optional image for this section
         */
        image?: (string | null) | Media;
        /**
         * Order of display (lower numbers appear first)
         */
        order?: number | null;
        /**
         * Whether this section is active and visible
         */
        isActive?: boolean | null;
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * Manage Student Life page content
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "student-life".
 */
export interface StudentLife {
  id: string;
  seo?: {
    /**
     * Meta title for SEO (defaults to hero title if empty). Recommended: 50-60 characters
     */
    metaTitle?: string | null;
    /**
     * Meta description for SEO and social media previews. Recommended: 150-160 characters
     */
    metaDescription?: string | null;
    /**
     * SEO keywords (comma-separated). Focus on 3-5 relevant keywords
     */
    keywords?: string | null;
    /**
     * Open Graph title for social media sharing (defaults to meta title if empty)
     */
    ogTitle?: string | null;
    /**
     * Open Graph description for social media sharing (defaults to meta description if empty)
     */
    ogDescription?: string | null;
    /**
     * Open Graph image for social media sharing (recommended: 1200x630px)
     */
    ogImage?: (string | null) | Media;
    /**
     * Twitter card type for Twitter sharing
     */
    twitterCard?: ('summary' | 'summary_large_image') | null;
    /**
     * Prevent search engines from indexing this page
     */
    noIndex?: boolean | null;
    /**
     * Prevent search engines from following links on this page
     */
    noFollow?: boolean | null;
    /**
     * Canonical URL for this page (leave empty to use current page URL)
     */
    canonicalUrl?: string | null;
  };
  /**
   * Main hero title for the student life page
   */
  heroTitle: string;
  /**
   * Hero subtitle displayed below the main title
   */
  heroSubtitle?: string | null;
  sections?:
    | {
        /**
         * Title of the section
         */
        title: string;
        /**
         * Choose the type of content for this section
         */
        contentType?:
          | (
              | 'richText'
              | 'table'
              | 'dynamicTable'
              | 'multipleTables'
              | 'mixed'
              | 'mixedDynamic'
              | 'mixedMultipleTables'
            )
          | null;
        /**
         * Rich text content for this section
         */
        content?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        /**
         * Table data with labels and links
         */
        tableData?:
          | {
              /**
               * Display text for the table row
               */
              label: string;
              /**
               * URL or file path for the link
               */
              link: string;
              /**
               * Check if this is an external link (opens in new tab)
               */
              isExternal?: boolean | null;
              id?: string | null;
            }[]
          | null;
        /**
         * Configure a custom table with multiple columns
         */
        dynamicTableConfig?: {
          /**
           * Paste CSV data here to automatically populate the table. Data will be processed when you save.
           */
          csvInput?: string | null;
          columns: {
            /**
             * Unique identifier for this column (no spaces, use camelCase)
             */
            key: string;
            /**
             * Display label for the column header
             */
            label: string;
            /**
             * Optional CSS width (e.g., "w-20", "w-1/4")
             */
            width?: string | null;
            id?: string | null;
          }[];
          /**
           * Add rows to your table. Each row should have data for all columns.
           */
          rows: {
            /**
             * Add data for each column in this row. Make sure to add cells in the same order as your columns.
             */
            rowData: {
              /**
               * Column key (should match one of your column keys above)
               */
              columnKey: string;
              /**
               * Cell content/value
               */
              value: string;
              /**
               * Make this cell a clickable link
               */
              isLink?: boolean | null;
              /**
               * URL for the link
               */
              linkUrl?: string | null;
              /**
               * External link (opens in new tab)
               */
              isExternal?: boolean | null;
              id?: string | null;
            }[];
            id?: string | null;
          }[];
          /**
           * Visual style of the table
           */
          variant?: ('default' | 'bordered' | 'striped') | null;
        };
        /**
         * Configure multiple custom tables with CSV input support
         */
        multipleTablesConfig?:
          | {
              /**
               * Title for this table
               */
              tableTitle?: string | null;
              /**
               * Paste CSV data here to automatically populate the table. Data will be processed when you save.
               */
              csvInput?: string | null;
              columns: {
                /**
                 * Unique identifier for this column (no spaces, use camelCase)
                 */
                key: string;
                /**
                 * Display label for the column header
                 */
                label: string;
                /**
                 * Optional CSS width (e.g., "w-20", "w-1/4")
                 */
                width?: string | null;
                id?: string | null;
              }[];
              /**
               * Add rows to your table. Each row should have data for all columns.
               */
              rows: {
                /**
                 * Add data for each column in this row. Make sure to add cells in the same order as your columns.
                 */
                rowData: {
                  /**
                   * Column key (should match one of your column keys above)
                   */
                  columnKey: string;
                  /**
                   * Cell content/value
                   */
                  value: string;
                  /**
                   * Make this cell a clickable link
                   */
                  isLink?: boolean | null;
                  /**
                   * URL for the link
                   */
                  linkUrl?: string | null;
                  /**
                   * External link (opens in new tab)
                   */
                  isExternal?: boolean | null;
                  id?: string | null;
                }[];
                id?: string | null;
              }[];
              /**
               * Visual style of the table
               */
              variant?: ('default' | 'bordered' | 'striped') | null;
              id?: string | null;
            }[]
          | null;
        /**
         * Optional custom title for the table (defaults to "Table Title")
         */
        tableTitle?: string | null;
        /**
         * Optional image for this section
         */
        image?: (string | null) | Media;
        /**
         * Order of display (lower numbers appear first)
         */
        order?: number | null;
        /**
         * Whether this section is active and visible
         */
        isActive?: boolean | null;
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * Manage Regulations page content
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "regulations".
 */
export interface Regulation {
  id: string;
  seo?: {
    /**
     * Meta title for SEO (defaults to hero title if empty). Recommended: 50-60 characters
     */
    metaTitle?: string | null;
    /**
     * Meta description for SEO and social media previews. Recommended: 150-160 characters
     */
    metaDescription?: string | null;
    /**
     * SEO keywords (comma-separated). Focus on 3-5 relevant keywords
     */
    keywords?: string | null;
    /**
     * Open Graph title for social media sharing (defaults to meta title if empty)
     */
    ogTitle?: string | null;
    /**
     * Open Graph description for social media sharing (defaults to meta description if empty)
     */
    ogDescription?: string | null;
    /**
     * Open Graph image for social media sharing (recommended: 1200x630px)
     */
    ogImage?: (string | null) | Media;
    /**
     * Twitter card type for Twitter sharing
     */
    twitterCard?: ('summary' | 'summary_large_image') | null;
    /**
     * Prevent search engines from indexing this page
     */
    noIndex?: boolean | null;
    /**
     * Prevent search engines from following links on this page
     */
    noFollow?: boolean | null;
    /**
     * Canonical URL for this page (leave empty to use current page URL)
     */
    canonicalUrl?: string | null;
  };
  /**
   * Main hero title for the regulations page
   */
  heroTitle: string;
  /**
   * Hero subtitle displayed below the main title
   */
  heroSubtitle?: string | null;
  sections?:
    | {
        /**
         * Title of the section
         */
        title: string;
        /**
         * Choose the type of content for this section
         */
        contentType?:
          | (
              | 'richText'
              | 'table'
              | 'dynamicTable'
              | 'multipleTables'
              | 'mixed'
              | 'mixedDynamic'
              | 'mixedMultipleTables'
            )
          | null;
        /**
         * Rich text content for this section
         */
        content?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        /**
         * Table data with labels and links
         */
        tableData?:
          | {
              /**
               * Display text for the table row
               */
              label: string;
              /**
               * URL or file path for the link
               */
              link: string;
              /**
               * Check if this is an external link (opens in new tab)
               */
              isExternal?: boolean | null;
              id?: string | null;
            }[]
          | null;
        /**
         * Configure a custom table with multiple columns
         */
        dynamicTableConfig?: {
          /**
           * Paste CSV data here to automatically populate the table. Data will be processed when you save.
           */
          csvInput?: string | null;
          columns: {
            /**
             * Unique identifier for this column (no spaces, use camelCase)
             */
            key: string;
            /**
             * Display label for the column header
             */
            label: string;
            /**
             * Optional CSS width (e.g., "w-20", "w-1/4")
             */
            width?: string | null;
            id?: string | null;
          }[];
          /**
           * Add rows to your table. Each row should have data for all columns.
           */
          rows: {
            /**
             * Add data for each column in this row. Make sure to add cells in the same order as your columns.
             */
            rowData: {
              /**
               * Column key (should match one of your column keys above)
               */
              columnKey: string;
              /**
               * Cell content/value
               */
              value: string;
              /**
               * Make this cell a clickable link
               */
              isLink?: boolean | null;
              /**
               * URL for the link
               */
              linkUrl?: string | null;
              /**
               * External link (opens in new tab)
               */
              isExternal?: boolean | null;
              id?: string | null;
            }[];
            id?: string | null;
          }[];
          /**
           * Visual style of the table
           */
          variant?: ('default' | 'bordered' | 'striped') | null;
        };
        /**
         * Configure multiple custom tables with CSV input support
         */
        multipleTablesConfig?:
          | {
              /**
               * Title for this table
               */
              tableTitle?: string | null;
              /**
               * Paste CSV data here to automatically populate the table. Data will be processed when you save.
               */
              csvInput?: string | null;
              columns: {
                /**
                 * Unique identifier for this column (no spaces, use camelCase)
                 */
                key: string;
                /**
                 * Display label for the column header
                 */
                label: string;
                /**
                 * Optional CSS width (e.g., "w-20", "w-1/4")
                 */
                width?: string | null;
                id?: string | null;
              }[];
              /**
               * Add rows to your table. Each row should have data for all columns.
               */
              rows: {
                /**
                 * Add data for each column in this row. Make sure to add cells in the same order as your columns.
                 */
                rowData: {
                  /**
                   * Column key (should match one of your column keys above)
                   */
                  columnKey: string;
                  /**
                   * Cell content/value
                   */
                  value: string;
                  /**
                   * Make this cell a clickable link
                   */
                  isLink?: boolean | null;
                  /**
                   * URL for the link
                   */
                  linkUrl?: string | null;
                  /**
                   * External link (opens in new tab)
                   */
                  isExternal?: boolean | null;
                  id?: string | null;
                }[];
                id?: string | null;
              }[];
              /**
               * Visual style of the table
               */
              variant?: ('default' | 'bordered' | 'striped') | null;
              id?: string | null;
            }[]
          | null;
        /**
         * Optional custom title for the table (defaults to "Table Title")
         */
        tableTitle?: string | null;
        /**
         * Optional image for this section
         */
        image?: (string | null) | Media;
        /**
         * Order of display (lower numbers appear first)
         */
        order?: number | null;
        /**
         * Whether this section is active and visible
         */
        isActive?: boolean | null;
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * Manage Facilities page content
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "facilities".
 */
export interface Facility {
  id: string;
  seo?: {
    /**
     * Meta title for SEO (defaults to hero title if empty). Recommended: 50-60 characters
     */
    metaTitle?: string | null;
    /**
     * Meta description for SEO and social media previews. Recommended: 150-160 characters
     */
    metaDescription?: string | null;
    /**
     * SEO keywords (comma-separated). Focus on 3-5 relevant keywords
     */
    keywords?: string | null;
    /**
     * Open Graph title for social media sharing (defaults to meta title if empty)
     */
    ogTitle?: string | null;
    /**
     * Open Graph description for social media sharing (defaults to meta description if empty)
     */
    ogDescription?: string | null;
    /**
     * Open Graph image for social media sharing (recommended: 1200x630px)
     */
    ogImage?: (string | null) | Media;
    /**
     * Twitter card type for Twitter sharing
     */
    twitterCard?: ('summary' | 'summary_large_image') | null;
    /**
     * Prevent search engines from indexing this page
     */
    noIndex?: boolean | null;
    /**
     * Prevent search engines from following links on this page
     */
    noFollow?: boolean | null;
    /**
     * Canonical URL for this page (leave empty to use current page URL)
     */
    canonicalUrl?: string | null;
  };
  /**
   * Main hero title for the facilities page
   */
  heroTitle: string;
  /**
   * Hero subtitle displayed below the main title
   */
  heroSubtitle?: string | null;
  sections?:
    | {
        /**
         * Title of the section
         */
        title: string;
        /**
         * Choose the type of content for this section
         */
        contentType?:
          | (
              | 'richText'
              | 'table'
              | 'dynamicTable'
              | 'multipleTables'
              | 'mixed'
              | 'mixedDynamic'
              | 'mixedMultipleTables'
            )
          | null;
        /**
         * Rich text content for this section
         */
        content?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        /**
         * Table data with labels and links
         */
        tableData?:
          | {
              /**
               * Display text for the table row
               */
              label: string;
              /**
               * URL or file path for the link
               */
              link: string;
              /**
               * Check if this is an external link (opens in new tab)
               */
              isExternal?: boolean | null;
              id?: string | null;
            }[]
          | null;
        /**
         * Configure a custom table with multiple columns
         */
        dynamicTableConfig?: {
          /**
           * Paste CSV data here to automatically populate the table. Data will be processed when you save.
           */
          csvInput?: string | null;
          columns: {
            /**
             * Unique identifier for this column (no spaces, use camelCase)
             */
            key: string;
            /**
             * Display label for the column header
             */
            label: string;
            /**
             * Optional CSS width (e.g., "w-20", "w-1/4")
             */
            width?: string | null;
            id?: string | null;
          }[];
          /**
           * Add rows to your table. Each row should have data for all columns.
           */
          rows: {
            /**
             * Add data for each column in this row. Make sure to add cells in the same order as your columns.
             */
            rowData: {
              /**
               * Column key (should match one of your column keys above)
               */
              columnKey: string;
              /**
               * Cell content/value
               */
              value: string;
              /**
               * Make this cell a clickable link
               */
              isLink?: boolean | null;
              /**
               * URL for the link
               */
              linkUrl?: string | null;
              /**
               * External link (opens in new tab)
               */
              isExternal?: boolean | null;
              id?: string | null;
            }[];
            id?: string | null;
          }[];
          /**
           * Visual style of the table
           */
          variant?: ('default' | 'bordered' | 'striped') | null;
        };
        /**
         * Configure multiple custom tables with CSV input support
         */
        multipleTablesConfig?:
          | {
              /**
               * Title for this table
               */
              tableTitle?: string | null;
              /**
               * Paste CSV data here to automatically populate the table. Data will be processed when you save.
               */
              csvInput?: string | null;
              columns: {
                /**
                 * Unique identifier for this column (no spaces, use camelCase)
                 */
                key: string;
                /**
                 * Display label for the column header
                 */
                label: string;
                /**
                 * Optional CSS width (e.g., "w-20", "w-1/4")
                 */
                width?: string | null;
                id?: string | null;
              }[];
              /**
               * Add rows to your table. Each row should have data for all columns.
               */
              rows: {
                /**
                 * Add data for each column in this row. Make sure to add cells in the same order as your columns.
                 */
                rowData: {
                  /**
                   * Column key (should match one of your column keys above)
                   */
                  columnKey: string;
                  /**
                   * Cell content/value
                   */
                  value: string;
                  /**
                   * Make this cell a clickable link
                   */
                  isLink?: boolean | null;
                  /**
                   * URL for the link
                   */
                  linkUrl?: string | null;
                  /**
                   * External link (opens in new tab)
                   */
                  isExternal?: boolean | null;
                  id?: string | null;
                }[];
                id?: string | null;
              }[];
              /**
               * Visual style of the table
               */
              variant?: ('default' | 'bordered' | 'striped') | null;
              id?: string | null;
            }[]
          | null;
        /**
         * Optional custom title for the table (defaults to "Table Title")
         */
        tableTitle?: string | null;
        /**
         * Optional image for this section
         */
        image?: (string | null) | Media;
        /**
         * Order of display (lower numbers appear first)
         */
        order?: number | null;
        /**
         * Whether this section is active and visible
         */
        isActive?: boolean | null;
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "about_select".
 */
export interface AboutSelect<T extends boolean = true> {
  seo?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        keywords?: T;
        ogTitle?: T;
        ogDescription?: T;
        ogImage?: T;
        twitterCard?: T;
        noIndex?: T;
        noFollow?: T;
        canonicalUrl?: T;
      };
  heroTitle?: T;
  heroSubtitle?: T;
  sections?:
    | T
    | {
        title?: T;
        contentType?: T;
        content?: T;
        tableData?:
          | T
          | {
              label?: T;
              link?: T;
              isExternal?: T;
              id?: T;
            };
        dynamicTableConfig?:
          | T
          | {
              csvInput?: T;
              columns?:
                | T
                | {
                    key?: T;
                    label?: T;
                    width?: T;
                    id?: T;
                  };
              rows?:
                | T
                | {
                    rowData?:
                      | T
                      | {
                          columnKey?: T;
                          value?: T;
                          isLink?: T;
                          linkUrl?: T;
                          isExternal?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              variant?: T;
            };
        multipleTablesConfig?:
          | T
          | {
              tableTitle?: T;
              csvInput?: T;
              columns?:
                | T
                | {
                    key?: T;
                    label?: T;
                    width?: T;
                    id?: T;
                  };
              rows?:
                | T
                | {
                    rowData?:
                      | T
                      | {
                          columnKey?: T;
                          value?: T;
                          isLink?: T;
                          linkUrl?: T;
                          isExternal?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              variant?: T;
              id?: T;
            };
        tableTitle?: T;
        image?: T;
        order?: T;
        isActive?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "admissions_select".
 */
export interface AdmissionsSelect<T extends boolean = true> {
  seo?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        keywords?: T;
        ogTitle?: T;
        ogDescription?: T;
        ogImage?: T;
        twitterCard?: T;
        noIndex?: T;
        noFollow?: T;
        canonicalUrl?: T;
      };
  heroTitle?: T;
  heroSubtitle?: T;
  sections?:
    | T
    | {
        title?: T;
        contentType?: T;
        content?: T;
        tableData?:
          | T
          | {
              label?: T;
              link?: T;
              isExternal?: T;
              id?: T;
            };
        dynamicTableConfig?:
          | T
          | {
              csvInput?: T;
              columns?:
                | T
                | {
                    key?: T;
                    label?: T;
                    width?: T;
                    id?: T;
                  };
              rows?:
                | T
                | {
                    rowData?:
                      | T
                      | {
                          columnKey?: T;
                          value?: T;
                          isLink?: T;
                          linkUrl?: T;
                          isExternal?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              variant?: T;
            };
        multipleTablesConfig?:
          | T
          | {
              tableTitle?: T;
              csvInput?: T;
              columns?:
                | T
                | {
                    key?: T;
                    label?: T;
                    width?: T;
                    id?: T;
                  };
              rows?:
                | T
                | {
                    rowData?:
                      | T
                      | {
                          columnKey?: T;
                          value?: T;
                          isLink?: T;
                          linkUrl?: T;
                          isExternal?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              variant?: T;
              id?: T;
            };
        tableTitle?: T;
        image?: T;
        order?: T;
        isActive?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "research_select".
 */
export interface ResearchSelect<T extends boolean = true> {
  seo?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        keywords?: T;
        ogTitle?: T;
        ogDescription?: T;
        ogImage?: T;
        twitterCard?: T;
        noIndex?: T;
        noFollow?: T;
        canonicalUrl?: T;
      };
  heroTitle?: T;
  heroSubtitle?: T;
  sections?:
    | T
    | {
        title?: T;
        contentType?: T;
        content?: T;
        tableData?:
          | T
          | {
              label?: T;
              link?: T;
              isExternal?: T;
              id?: T;
            };
        dynamicTableConfig?:
          | T
          | {
              csvInput?: T;
              columns?:
                | T
                | {
                    key?: T;
                    label?: T;
                    width?: T;
                    id?: T;
                  };
              rows?:
                | T
                | {
                    rowData?:
                      | T
                      | {
                          columnKey?: T;
                          value?: T;
                          isLink?: T;
                          linkUrl?: T;
                          isExternal?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              variant?: T;
            };
        multipleTablesConfig?:
          | T
          | {
              tableTitle?: T;
              csvInput?: T;
              columns?:
                | T
                | {
                    key?: T;
                    label?: T;
                    width?: T;
                    id?: T;
                  };
              rows?:
                | T
                | {
                    rowData?:
                      | T
                      | {
                          columnKey?: T;
                          value?: T;
                          isLink?: T;
                          linkUrl?: T;
                          isExternal?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              variant?: T;
              id?: T;
            };
        tableTitle?: T;
        image?: T;
        order?: T;
        isActive?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "placement_select".
 */
export interface PlacementSelect<T extends boolean = true> {
  seo?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        keywords?: T;
        ogTitle?: T;
        ogDescription?: T;
        ogImage?: T;
        twitterCard?: T;
        noIndex?: T;
        noFollow?: T;
        canonicalUrl?: T;
      };
  heroTitle?: T;
  heroSubtitle?: T;
  sections?:
    | T
    | {
        title?: T;
        contentType?: T;
        content?: T;
        tableData?:
          | T
          | {
              label?: T;
              link?: T;
              isExternal?: T;
              id?: T;
            };
        dynamicTableConfig?:
          | T
          | {
              csvInput?: T;
              columns?:
                | T
                | {
                    key?: T;
                    label?: T;
                    width?: T;
                    id?: T;
                  };
              rows?:
                | T
                | {
                    rowData?:
                      | T
                      | {
                          columnKey?: T;
                          value?: T;
                          isLink?: T;
                          linkUrl?: T;
                          isExternal?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              variant?: T;
            };
        multipleTablesConfig?:
          | T
          | {
              tableTitle?: T;
              csvInput?: T;
              columns?:
                | T
                | {
                    key?: T;
                    label?: T;
                    width?: T;
                    id?: T;
                  };
              rows?:
                | T
                | {
                    rowData?:
                      | T
                      | {
                          columnKey?: T;
                          value?: T;
                          isLink?: T;
                          linkUrl?: T;
                          isExternal?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              variant?: T;
              id?: T;
            };
        tableTitle?: T;
        image?: T;
        order?: T;
        isActive?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "international-relations_select".
 */
export interface InternationalRelationsSelect<T extends boolean = true> {
  seo?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        keywords?: T;
        ogTitle?: T;
        ogDescription?: T;
        ogImage?: T;
        twitterCard?: T;
        noIndex?: T;
        noFollow?: T;
        canonicalUrl?: T;
      };
  heroTitle?: T;
  heroSubtitle?: T;
  sections?:
    | T
    | {
        title?: T;
        contentType?: T;
        content?: T;
        tableData?:
          | T
          | {
              label?: T;
              link?: T;
              isExternal?: T;
              id?: T;
            };
        dynamicTableConfig?:
          | T
          | {
              csvInput?: T;
              columns?:
                | T
                | {
                    key?: T;
                    label?: T;
                    width?: T;
                    id?: T;
                  };
              rows?:
                | T
                | {
                    rowData?:
                      | T
                      | {
                          columnKey?: T;
                          value?: T;
                          isLink?: T;
                          linkUrl?: T;
                          isExternal?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              variant?: T;
            };
        multipleTablesConfig?:
          | T
          | {
              tableTitle?: T;
              csvInput?: T;
              columns?:
                | T
                | {
                    key?: T;
                    label?: T;
                    width?: T;
                    id?: T;
                  };
              rows?:
                | T
                | {
                    rowData?:
                      | T
                      | {
                          columnKey?: T;
                          value?: T;
                          isLink?: T;
                          linkUrl?: T;
                          isExternal?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              variant?: T;
              id?: T;
            };
        tableTitle?: T;
        image?: T;
        order?: T;
        isActive?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "academics_select".
 */
export interface AcademicsSelect<T extends boolean = true> {
  seo?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        keywords?: T;
        ogTitle?: T;
        ogDescription?: T;
        ogImage?: T;
        twitterCard?: T;
        noIndex?: T;
        noFollow?: T;
        canonicalUrl?: T;
      };
  heroTitle?: T;
  heroSubtitle?: T;
  sections?:
    | T
    | {
        title?: T;
        contentType?: T;
        content?: T;
        tableData?:
          | T
          | {
              label?: T;
              link?: T;
              isExternal?: T;
              id?: T;
            };
        dynamicTableConfig?:
          | T
          | {
              csvInput?: T;
              columns?:
                | T
                | {
                    key?: T;
                    label?: T;
                    width?: T;
                    id?: T;
                  };
              rows?:
                | T
                | {
                    rowData?:
                      | T
                      | {
                          columnKey?: T;
                          value?: T;
                          isLink?: T;
                          linkUrl?: T;
                          isExternal?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              variant?: T;
            };
        multipleTablesConfig?:
          | T
          | {
              tableTitle?: T;
              csvInput?: T;
              columns?:
                | T
                | {
                    key?: T;
                    label?: T;
                    width?: T;
                    id?: T;
                  };
              rows?:
                | T
                | {
                    rowData?:
                      | T
                      | {
                          columnKey?: T;
                          value?: T;
                          isLink?: T;
                          linkUrl?: T;
                          isExternal?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              variant?: T;
              id?: T;
            };
        tableTitle?: T;
        image?: T;
        order?: T;
        isActive?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "student-life_select".
 */
export interface StudentLifeSelect<T extends boolean = true> {
  seo?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        keywords?: T;
        ogTitle?: T;
        ogDescription?: T;
        ogImage?: T;
        twitterCard?: T;
        noIndex?: T;
        noFollow?: T;
        canonicalUrl?: T;
      };
  heroTitle?: T;
  heroSubtitle?: T;
  sections?:
    | T
    | {
        title?: T;
        contentType?: T;
        content?: T;
        tableData?:
          | T
          | {
              label?: T;
              link?: T;
              isExternal?: T;
              id?: T;
            };
        dynamicTableConfig?:
          | T
          | {
              csvInput?: T;
              columns?:
                | T
                | {
                    key?: T;
                    label?: T;
                    width?: T;
                    id?: T;
                  };
              rows?:
                | T
                | {
                    rowData?:
                      | T
                      | {
                          columnKey?: T;
                          value?: T;
                          isLink?: T;
                          linkUrl?: T;
                          isExternal?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              variant?: T;
            };
        multipleTablesConfig?:
          | T
          | {
              tableTitle?: T;
              csvInput?: T;
              columns?:
                | T
                | {
                    key?: T;
                    label?: T;
                    width?: T;
                    id?: T;
                  };
              rows?:
                | T
                | {
                    rowData?:
                      | T
                      | {
                          columnKey?: T;
                          value?: T;
                          isLink?: T;
                          linkUrl?: T;
                          isExternal?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              variant?: T;
              id?: T;
            };
        tableTitle?: T;
        image?: T;
        order?: T;
        isActive?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "regulations_select".
 */
export interface RegulationsSelect<T extends boolean = true> {
  seo?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        keywords?: T;
        ogTitle?: T;
        ogDescription?: T;
        ogImage?: T;
        twitterCard?: T;
        noIndex?: T;
        noFollow?: T;
        canonicalUrl?: T;
      };
  heroTitle?: T;
  heroSubtitle?: T;
  sections?:
    | T
    | {
        title?: T;
        contentType?: T;
        content?: T;
        tableData?:
          | T
          | {
              label?: T;
              link?: T;
              isExternal?: T;
              id?: T;
            };
        dynamicTableConfig?:
          | T
          | {
              csvInput?: T;
              columns?:
                | T
                | {
                    key?: T;
                    label?: T;
                    width?: T;
                    id?: T;
                  };
              rows?:
                | T
                | {
                    rowData?:
                      | T
                      | {
                          columnKey?: T;
                          value?: T;
                          isLink?: T;
                          linkUrl?: T;
                          isExternal?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              variant?: T;
            };
        multipleTablesConfig?:
          | T
          | {
              tableTitle?: T;
              csvInput?: T;
              columns?:
                | T
                | {
                    key?: T;
                    label?: T;
                    width?: T;
                    id?: T;
                  };
              rows?:
                | T
                | {
                    rowData?:
                      | T
                      | {
                          columnKey?: T;
                          value?: T;
                          isLink?: T;
                          linkUrl?: T;
                          isExternal?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              variant?: T;
              id?: T;
            };
        tableTitle?: T;
        image?: T;
        order?: T;
        isActive?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "facilities_select".
 */
export interface FacilitiesSelect<T extends boolean = true> {
  seo?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        keywords?: T;
        ogTitle?: T;
        ogDescription?: T;
        ogImage?: T;
        twitterCard?: T;
        noIndex?: T;
        noFollow?: T;
        canonicalUrl?: T;
      };
  heroTitle?: T;
  heroSubtitle?: T;
  sections?:
    | T
    | {
        title?: T;
        contentType?: T;
        content?: T;
        tableData?:
          | T
          | {
              label?: T;
              link?: T;
              isExternal?: T;
              id?: T;
            };
        dynamicTableConfig?:
          | T
          | {
              csvInput?: T;
              columns?:
                | T
                | {
                    key?: T;
                    label?: T;
                    width?: T;
                    id?: T;
                  };
              rows?:
                | T
                | {
                    rowData?:
                      | T
                      | {
                          columnKey?: T;
                          value?: T;
                          isLink?: T;
                          linkUrl?: T;
                          isExternal?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              variant?: T;
            };
        multipleTablesConfig?:
          | T
          | {
              tableTitle?: T;
              csvInput?: T;
              columns?:
                | T
                | {
                    key?: T;
                    label?: T;
                    width?: T;
                    id?: T;
                  };
              rows?:
                | T
                | {
                    rowData?:
                      | T
                      | {
                          columnKey?: T;
                          value?: T;
                          isLink?: T;
                          linkUrl?: T;
                          isExternal?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              variant?: T;
              id?: T;
            };
        tableTitle?: T;
        image?: T;
        order?: T;
        isActive?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}